{
  "version": 3,
  "sources": ["../src/config.ts"],
  "sourcesContent": ["import { config as configDotenv } from 'dotenv';\n\nfunction stringEnvVar(envVarName: keyof (typeof process)['env']): string;\n\nfunction stringEnvVar(envVarName: keyof (typeof process)['env'], defaultValue: string): string;\n\nfunction stringEnvVar(envVarName: keyof (typeof process)['env'], defaultValue: null): string | undefined;\nfunction stringEnvVar(envVarName: keyof (typeof process)['env'], defaultValue?: string | null): string | undefined {\n    const value = process.env[envVarName];\n    if (value == null && defaultValue === undefined) {\n        console.error(`Missing env var ${envVarName}`);\n        process.exit(1);\n    }\n    return value ?? defaultValue ?? undefined;\n}\nfunction intEnvVar(envVarName: keyof (typeof process)['env'], defaultValue?: number): number {\n    if (defaultValue != null) {\n        const value = stringEnvVar(envVarName, null);\n        if (value == null) {\n            return defaultValue;\n        }\n        return parseInt(value, 10);\n    } else {\n        const value = stringEnvVar(envVarName);\n        return parseInt(value, 10);\n    }\n}\nfunction boolEnvVar(envVarName: keyof (typeof process)['env'], defaultValue = false): boolean {\n    const value = stringEnvVar(envVarName, null);\n    if (value == null) {\n        return defaultValue;\n    }\n    return value === 'true';\n}\n\nfunction arrayEnvVar(envVarName: keyof (typeof process)['env'], defaultValue?: string[]): string[] {\n    if (defaultValue != null) {\n        const value = stringEnvVar(envVarName, null);\n        if (value == null) {\n            return defaultValue;\n        }\n        return value.split(',');\n    } else {\n        const value = stringEnvVar(envVarName);\n        return value.split(',');\n    }\n}\nexport function getConfig() {\n    configDotenv();\n    return {\n        username: stringEnvVar('S2M_USER'),\n        password: stringEnvVar('S2M_PASSWORD'),\n        country: stringEnvVar('S2M_COUNTRY'),\n        loginStore: stringEnvVar('S2M_LOGIN_STORE', 'auth.data'),\n        pollInterval: intEnvVar('S2M_POLL_INTERVAL', 30),\n        mqttUrl: stringEnvVar('S2M_MQTT_URI'),\n        mqttClientId: stringEnvVar('S2M_MQTT_CLIENT_ID', 'solix2mqtt'),\n        mqttUsername: stringEnvVar('S2M_MQTT_USERNAME', null),\n        mqttPassword: stringEnvVar('S2M_MQTT_PASSWORD', null),\n        mqttRetain: boolEnvVar('S2M_MQTT_RETAIN'),\n        mqttTopic: stringEnvVar('S2M_MQTT_TOPIC', 'solix'),\n        verbose: boolEnvVar('S2M_VERBOSE', false),\n    };\n}\n\nexport function anonymizeConfig(config: ReturnType<typeof getConfig>): ReturnType<typeof getConfig> {\n    const newConfig = { ...config };\n    const hideKeys: Array<keyof ReturnType<typeof getConfig>> = ['password'];\n    for (const key of hideKeys) {\n        if (config[key] != null) {\n            (newConfig as any)[key] = '***';\n        }\n    }\n    return newConfig;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAuC;AAOvC,SAAS,aAAa,YAA2C,cAAkD;AAPnH;AAQI,QAAM,QAAQ,QAAQ,IAAI,UAAU;AACpC,MAAI,SAAS,QAAQ,iBAAiB,QAAW;AAC7C,YAAQ,MAAM,mBAAmB,UAAU,EAAE;AAC7C,YAAQ,KAAK,CAAC;AAAA,EAClB;AACA,UAAO,6BAAS,iBAAT,YAAyB;AACpC;AACA,SAAS,UAAU,YAA2C,cAA+B;AACzF,MAAI,gBAAgB,MAAM;AACtB,UAAM,QAAQ,aAAa,YAAY,IAAI;AAC3C,QAAI,SAAS,MAAM;AACf,aAAO;AAAA,IACX;AACA,WAAO,SAAS,OAAO,EAAE;AAAA,EAC7B,OAAO;AACH,UAAM,QAAQ,aAAa,UAAU;AACrC,WAAO,SAAS,OAAO,EAAE;AAAA,EAC7B;AACJ;AACA,SAAS,WAAW,YAA2C,eAAe,OAAgB;AAC1F,QAAM,QAAQ,aAAa,YAAY,IAAI;AAC3C,MAAI,SAAS,MAAM;AACf,WAAO;AAAA,EACX;AACA,SAAO,UAAU;AACrB;AAEA,SAAS,YAAY,YAA2C,cAAmC;AAC/F,MAAI,gBAAgB,MAAM;AACtB,UAAM,QAAQ,aAAa,YAAY,IAAI;AAC3C,QAAI,SAAS,MAAM;AACf,aAAO;AAAA,IACX;AACA,WAAO,MAAM,MAAM,GAAG;AAAA,EAC1B,OAAO;AACH,UAAM,QAAQ,aAAa,UAAU;AACrC,WAAO,MAAM,MAAM,GAAG;AAAA,EAC1B;AACJ;AACO,SAAS,YAAY;AACxB,oBAAAA,QAAa;AACb,SAAO;AAAA,IACH,UAAU,aAAa,UAAU;AAAA,IACjC,UAAU,aAAa,cAAc;AAAA,IACrC,SAAS,aAAa,aAAa;AAAA,IACnC,YAAY,aAAa,mBAAmB,WAAW;AAAA,IACvD,cAAc,UAAU,qBAAqB,EAAE;AAAA,IAC/C,SAAS,aAAa,cAAc;AAAA,IACpC,cAAc,aAAa,sBAAsB,YAAY;AAAA,IAC7D,cAAc,aAAa,qBAAqB,IAAI;AAAA,IACpD,cAAc,aAAa,qBAAqB,IAAI;AAAA,IACpD,YAAY,WAAW,iBAAiB;AAAA,IACxC,WAAW,aAAa,kBAAkB,OAAO;AAAA,IACjD,SAAS,WAAW,eAAe,KAAK;AAAA,EAC5C;AACJ;AAEO,SAAS,gBAAgB,QAAoE;AAChG,QAAM,YAAY,EAAE,GAAG,OAAO;AAC9B,QAAM,WAAsD,CAAC,UAAU;AACvE,aAAW,OAAO,UAAU;AACxB,QAAI,OAAO,GAAG,KAAK,MAAM;AACrB,MAAC,UAAkB,GAAG,IAAI;AAAA,IAC9B;AAAA,EACJ;AACA,SAAO;AACX;",
  "names": ["configDotenv"]
}
