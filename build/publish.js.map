{
  "version": 3,
  "sources": ["../src/publish.ts"],
  "sourcesContent": ["import { AsyncMqttClient, connectAsync } from 'async-mqtt';\n\nexport class Publisher {\n    private client: AsyncMqttClient | undefined;\n\n    constructor(\n        private readonly url: string,\n        private readonly retain?: boolean,\n        private readonly clientId?: string,\n        private readonly username?: string,\n        private readonly password?: string,\n    ) {}\n\n    private async getClient() {\n        if (this.client && this.client.connected) {\n            return this.client;\n        }\n        await this.client?.end();\n        this.client = await connectAsync(this.url, {\n            clientId: this.clientId,\n            username: this.username,\n            password: this.password,\n        });\n        return this.client;\n    }\n\n    async publish(topic: string, message: any) {\n        await (await this.getClient()).publish(topic, JSON.stringify(message), { retain: this.retain });\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA8C;AAEvC,MAAM,UAAU;AAAA,EAGnB,YACqB,KACA,QACA,UACA,UACA,UACnB;AALmB;AACA;AACA;AACA;AACA;AAAA,EAClB;AAAA,EARK;AAAA,EAUR,MAAc,YAAY;AAb9B;AAcQ,QAAI,KAAK,UAAU,KAAK,OAAO,WAAW;AACtC,aAAO,KAAK;AAAA,IAChB;AACA,YAAM,UAAK,WAAL,mBAAa;AACnB,SAAK,SAAS,UAAM,gCAAa,KAAK,KAAK;AAAA,MACvC,UAAU,KAAK;AAAA,MACf,UAAU,KAAK;AAAA,MACf,UAAU,KAAK;AAAA,IACnB,CAAC;AACD,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,MAAM,QAAQ,OAAe,SAAc;AACvC,WAAO,MAAM,KAAK,UAAU,GAAG,QAAQ,OAAO,KAAK,UAAU,OAAO,GAAG,EAAE,QAAQ,KAAK,OAAO,CAAC;AAAA,EAClG;AACJ;",
  "names": []
}
