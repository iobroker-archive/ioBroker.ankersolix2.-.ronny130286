{
  "version": 3,
  "sources": ["../src/api.ts"],
  "sourcesContent": ["import axios from 'axios';\nimport { ECDH, createCipheriv, createECDH, createHash } from 'crypto';\nimport { Logger } from './utils';\n\nexport interface Options {\n    username: string;\n    password: string;\n    country: string;\n    log?: Logger;\n}\n\nexport interface LoginRequest {\n    ab: string;\n    client_secret_info: {\n        public_key: string;\n    };\n    enc: number;\n    email: string;\n    password: string;\n    time_zone: number;\n    verify_code?: string;\n    captcha_id?: string;\n    answer?: string;\n    transaction: string;\n}\n\nexport interface SuccessResponse<T> {\n    code: 0 | number;\n    msg: 'success!';\n    data: T;\n}\n\nexport interface BaseResponse<T> {\n    code: number;\n    msg: string;\n    data?: T;\n    outline?: any;\n    trace_id: string;\n}\n\nexport type ResultResponse<T> = BaseResponse<T> & SuccessResponse<T>;\n\nexport interface LoginResultResponse {\n    user_id: string;\n    email: string;\n    nick_name: string;\n    auth_token: string;\n    token_expires_at: number;\n    avatar: string;\n    invitation_code?: string;\n    inviter_code?: string;\n    verify_code_url?: string;\n    mac_addr: string;\n    domain: string;\n    ab_code: string;\n    geo_key: string;\n    privilege: number;\n    phone: string;\n    phone_code: string;\n    server_secret_info: {\n        public_key: string;\n    } | null;\n    params: Array<{\n        param_type: number;\n        param_value: string;\n    }> | null;\n    trust_list: Array<TrustDevice> | null;\n    token_id: number;\n    fa_info: {\n        step: number;\n        info: string;\n    };\n    country_code: string;\n}\n\nexport interface DeviceData {\n    device_sn: string;\n    product_code: string;\n    bt_ble_id: string;\n    bt_ble_mac: string;\n    device_name: string;\n    alias_name: string;\n    img_url: string;\n    link_time: number;\n    wifi_online: boolean;\n    wifi_name: string;\n    relate_type: string[];\n    charge: boolean;\n    bws_surplus: number;\n    device_sw_version: string;\n}\n\nexport interface DeviceDataResponse {\n    data: DeviceData[];\n}\n\ninterface SiteHomepageResponse {\n    site_list: Site[];\n    solar_list: any[];\n    pps_list: any[];\n    solarbank_list: Solarbank[];\n}\n\ninterface SiteListResponse {\n    site_list: Site[];\n}\n\nexport interface UserMqttInfo {\n    /**\n     * A unique identifier for the user.\n     * Typically a SHA-1 hash or similar.\n     */\n    user_id: string;\n\n    /**\n     * A string that denotes the name of the application.\n     */\n    app_name: string;\n\n    /**\n     * Formed as a combination of the user_id and app_name.\n     */\n    thing_name: string;\n\n    /**\n     * Identifier for a certificate.\n     */\n    certificate_id: string;\n\n    /**\n     * A PEM-formatted X.509 certificate.\n     */\n    certificate_pem: string;\n\n    /**\n     * The RSA private key, PEM-formatted.\n     */\n    private_key: string;\n\n    /**\n     * RSA Public key, PEM-formatted. Was always empty\n     */\n    public_key: string;\n\n    /**\n     * Address of the MQTT endpoint.\n     */\n    endpoint_addr: string;\n\n    /**\n     * A PEM-formatted Root CA certificate.\n     * Used to validate the authenticity of the remote server.\n     */\n    aws_root_ca1_pem: string;\n\n    origin: string;\n\n    /**\n     * PKCS#12, a binary format for storing the server certificate,\n     * any intermediate certificates, and the private key in one encryptable file.\n     */\n    pkcs12: string;\n}\n\nexport interface Site {\n    site_id: string;\n    site_name: string;\n    site_img: string;\n    device_type_list: number[];\n}\n\nexport interface Solarbank {\n    device_pn: string;\n    device_sn: string;\n    device_name: string;\n    device_img: string;\n    battery_power: `${number}`;\n    bind_site_status: string;\n    charging_power: `${number}`;\n    power_unit: string;\n    charging_status: `${number}`;\n    status: `${number}`;\n    wireless_type: `${number}`;\n    main_version: `${number}`;\n    photovoltaic_power: `${number}`;\n    output_power: `${number}`;\n    create_time: string;\n}\n\nexport interface ScenInfo {\n    home_info: {\n        home_name: string;\n        home_img: string;\n        charging_power: `${number}`;\n        power_unit: string;\n    };\n    solar_list: any[];\n    pps_info: {\n        pps_list: any[];\n        total_charging_power: `${number}`;\n        power_unit: string;\n        total_battery_power: `${number}`;\n        updated_time: string;\n        pps_status: number;\n    };\n    statistics: Array<{\n        type: `${number}`;\n        total: `${number}`;\n        unit: string;\n    }>;\n    topology_type: `${number}`;\n    solarbank_info: {\n        solarbank_list: Solarbank[];\n        total_charging_power: `${number}`;\n        power_unit: string;\n        charging_status: `${number}`;\n        total_battery_power: `${number}`;\n        updated_time: string;\n        total_photovoltaic_power: `${number}`;\n        total_output_power: `${number}`;\n    };\n    retain_load: string;\n    updated_time: string;\n    power_site_type: number;\n    side_id: string;\n}\n\nexport interface EnergyAnalysis {\n    power: Array<{\n        time: `${number}:${number}`;\n        value: `${number}`;\n    }>;\n    charge_trend: null;\n    charge_level: any[];\n    power_unit: string;\n    charge_total: `${number}`;\n    charge_unit: string;\n    discharge_total: `${number}`;\n    discharge_unit: string;\n    charging_pre: `${number}`;\n    electricity_pre: `${number}`;\n    others_pre: `${number}`;\n    statistics: Array<{\n        type: `${number}`;\n        total: `${number}`;\n        unit: string;\n    }>;\n}\n\nexport interface LoadData {\n    time: string;\n    load: number;\n}\n\nexport interface HomeLoadChartResponse {\n    data: LoadData[];\n}\n\nexport interface TrustDevice {\n    open_udid: string;\n    phone_model: string;\n    is_current_device: number;\n}\n\nexport interface ApplianceLoad {\n    id: number;\n    name: string;\n    power: number;\n    number: number;\n}\n\nexport interface Range {\n    id: number;\n    start_time: string;\n    end_time: string;\n    turn_on: boolean;\n    appliance_loads: ApplianceLoad[];\n}\n\nexport interface LoadConfiguration {\n    ranges: Range[];\n    min_load: number;\n    max_load: number;\n    step: number;\n}\n\nexport enum ParamType {\n    LoadConfiguration = '4',\n}\n\nexport type ParamData<T extends ParamType> = T extends ParamType.LoadConfiguration ? LoadConfiguration : string;\n\nexport interface SiteDeviceParamResponse<T extends ParamType> {\n    param_data: ParamData<T>;\n}\n\nexport class SolixApi {\n    private readonly SERVER_PUBLIC_KEY =\n        '04c5c00c4f8d1197cc7c3167c52bf7acb054d722f0ef08dcd7e0883236e0d72a3868d9750cb47fa4619248f3d83f0f662671dadc6e2d31c2f41db0161651c7c076';\n\n    private readonly username: string;\n\n    private readonly password: string;\n\n    private readonly country: string;\n\n    private readonly timezone: string;\n\n    private ecdh: ECDH = createECDH('prime256v1');\n\n    private readonly log: Logger;\n\n    constructor(options: Options) {\n        this.username = options.username;\n        this.password = options.password;\n        this.log = options.log ?? console;\n        this.country = options.country.toUpperCase();\n        this.timezone = this.getTimezoneGMTString();\n        this.ecdh.generateKeys();\n    }\n\n    private md5(s: string): string {\n        //this.log.debug(s);\n        return createHash('md5').update(Buffer.from(s)).digest('hex');\n    }\n\n    private getTimezoneGMTString(): string {\n        const tzo = -new Date().getTimezoneOffset();\n        const dif = tzo >= 0 ? '+' : '-';\n        return `GMT${dif}${this.pad(tzo / 60)}:${this.pad(tzo % 60)}`;\n    }\n\n    private pad(num: number): string {\n        const norm = Math.floor(Math.abs(num));\n        return `${norm < 10 ? '0' : ''}${norm}`;\n    }\n\n    private encryptAPIData(data: string, key: Buffer): string {\n        const cipher = createCipheriv('aes-256-cbc', key, key.slice(0, 16));\n        return cipher.update(data, 'utf8', 'base64') + cipher.final('base64');\n    }\n\n    private async axios(endpoint: string, data?: any, headers?: Record<string, string>): Promise<axios.AxiosResponse> {\n        //this.log.debug(JSON.stringify(data));\n        const urlBuilder = new URL(endpoint, 'https://ankerpower-api-eu.anker.com');\n        const url = urlBuilder.href;\n\n        return axios({\n            method: 'POST',\n            url: url,\n            data: data != null ? JSON.stringify(data) : undefined,\n            headers: {\n                ['Content-Type']: 'application/json',\n                Country: this.country,\n                Timezone: this.timezone,\n                ['Model-Type']: 'DESKTOP',\n                ['App-Name']: 'anker_power',\n                ['Os-Type']: 'android',\n                ...headers,\n            },\n        });\n    }\n\n    public withLogin(login: LoginResultResponse): any {\n        const headers = { ['X-Auth-Token']: login.auth_token, gtoken: this.md5(login.user_id) };\n        const authFetch = async <T>(endpoint: string, data?: any): Promise<ResultResponse<T>> => {\n            const response = await this.axios(endpoint, data, headers);\n            return (await response.data) as ResultResponse<T>;\n        };\n        return {\n            getRelateAndBindDevices: async () => {\n                const data = {};\n                return authFetch<DeviceDataResponse>('/power_service/v1/app/get_relate_and_bind_devices', data);\n            },\n            getUserMqttInfo: async () => {\n                return authFetch<UserMqttInfo>('/app/devicemanage/get_user_mqtt_info');\n            },\n            siteHomepage: async () => {\n                const data = {};\n                return authFetch<SiteHomepageResponse>('/power_service/v1/site/get_site_homepage', data);\n            },\n            getSiteList: async () => {\n                const data = {};\n                return authFetch<SiteListResponse>('/power_service/v1/site/get_site_list', data);\n            },\n            getHomeLoadChart: async ({\n                siteId,\n                deviceSn = '', // Was always an empty string\n            }: {\n                siteId: string;\n                deviceSn?: string;\n            }) => {\n                const data = { site_id: siteId, device_sn: deviceSn };\n                return authFetch<HomeLoadChartResponse>('/power_service/v1/site/get_home_load_chart', data);\n            },\n            scenInfo: async (siteId: string) => {\n                const data = { site_id: siteId };\n                //this.log.warn('scenInfo: ' + siteId);\n                return authFetch<ScenInfo>('/power_service/v1/site/get_scen_info', data);\n            },\n            energyAnalysis: async ({\n                siteId,\n                deviceSn,\n                type,\n                startTime = new Date(),\n                endTime,\n                deviceType = 'solar_production',\n            }: {\n                siteId: string;\n                deviceSn: string;\n                type: 'day' | 'week' | 'year';\n                startTime?: Date;\n                endTime?: Date;\n                deviceType?: 'solar_production';\n            }) => {\n                const startTimeString = `${startTime.getUTCFullYear()}-${this.pad(startTime.getUTCMonth())}-${this.pad(startTime.getUTCDate())}`;\n                const endTimeString =\n                    endTime != null\n                        ? `${endTime.getUTCFullYear()}-${endTime.getUTCMonth()}-${endTime.getUTCDate()}`\n                        : '';\n                const data = {\n                    site_id: siteId,\n                    device_sn: deviceSn,\n                    type,\n                    start_time: startTimeString,\n                    device_type: deviceType,\n                    end_time: endTimeString,\n                };\n                return authFetch<EnergyAnalysis>('/power_service/v1/site/energy_analysis', data);\n            },\n            getSiteDeviceParam: async <T extends ParamType>({\n                paramType,\n                siteId,\n            }: {\n                paramType: T;\n                siteId: string;\n            }): Promise<ResultResponse<SiteDeviceParamResponse<T>>> => {\n                const data = { site_id: siteId, param_type: paramType }; //sn APCGQ80E28300425\n\n                //this.log.debug('data: ' + siteId + ' paramtype: ' + paramType);\n\n                const response = await authFetch<{ param_data: string }>(\n                    '/power_service/v1/site/get_site_device_param',\n                    data,\n                );\n                if (response.data != null) {\n                    switch (paramType) {\n                        case ParamType.LoadConfiguration:\n                            return {\n                                ...response,\n                                data: { param_data: JSON.parse(response.data.param_data) as ParamData<T> },\n                            };\n                        default:\n                            return response as ResultResponse<SiteDeviceParamResponse<T>>;\n                    }\n                }\n                return response as ResultResponse<SiteDeviceParamResponse<T>>;\n            },\n            setSiteDeviceParam: async <T extends ParamType>({\n                paramType,\n                siteId,\n                cmd = 17, // Unknown what this means but it's alway 17\n                paramData,\n            }: {\n                paramType: T;\n                siteId: string;\n                cmd?: number;\n                paramData: ParamData<T>;\n            }) => {\n                let data = { site_id: siteId, param_type: paramType, cmd, param_data: paramData as unknown };\n                switch (paramType) {\n                    case ParamType.LoadConfiguration:\n                        data = { ...data, param_data: JSON.stringify(paramData) };\n                        break;\n                    default:\n                    // Should be a string already\n                }\n                return authFetch<Record<string, never>>('/power_service/v1/site/set_site_device_param', data);\n            },\n        };\n    }\n\n    public async login(): Promise<ResultResponse<LoginResultResponse>> {\n        const data: LoginRequest = {\n            ab: this.country,\n            client_secret_info: {\n                public_key: this.ecdh.getPublicKey('hex'),\n            },\n            enc: 0,\n            email: this.username,\n            password: this.encryptAPIData(\n                this.password,\n                this.ecdh.computeSecret(Buffer.from(this.SERVER_PUBLIC_KEY, 'hex')),\n            ),\n            time_zone: new Date().getTimezoneOffset() !== 0 ? -new Date().getTimezoneOffset() * 60 * 1000 : 0,\n            transaction: `${new Date().getTime()}`,\n        };\n        const response = await this.axios('/passport/login', data);\n\n        //if (response.status === 200) {\n        return (await response.data) as ResultResponse<LoginResultResponse>;\n        //} else {\n        //   throw new Error(`Login failed (${response.status}): ${await response.data}`);\n        //}\n    }\n}\n"],
  "mappings": "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",
  "names": ["ParamType", "axios"]
}
