{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.3\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport fs, { promises as pfs } from 'fs';\nimport { SolixApi, type LoginResultResponse } from './api';\nimport { DeviceCapacity, type CRPRange, type CustomRatePlan, type EnergyConfig } from './apitypes';\nimport { MyFunc } from './func';\n// Load your modules here, e.g.:\n\nclass Ankersolix2 extends utils.Adapter {\n    private storeData: string = '';\n    private refreshTimeout: any;\n    private refreshAnalysisTimeout: any;\n    private loginData: LoginResultResponse | null;\n    private api: any;\n    private apiConnection: boolean;\n    private sleep: any;\n    private isAdmin: boolean = false;\n    private loggedInApi: any;\n    private myfunc: MyFunc;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'ankersolix2',\n        });\n\n        this.storeData = `${utils.getAbsoluteInstanceDataDir(this)}/session.json`;\n        this.loginData = null;\n        this.refreshTimeout = null;\n        this.refreshAnalysisTimeout = null;\n        this.sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n        this.api = null;\n        this.apiConnection = false;\n        this.myfunc = new MyFunc(this);\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        //this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        this.loginData = await this.loginAPI();\n\n        if (typeof this.config.HomeLoadID === 'string' && this.config.HomeLoadID.trim() !== '') {\n            if (this.config.EnableControlDP) {\n                this.subscribeForeignStates(`${this.config.HomeLoadID}`);\n            }\n\n            if (this.config.EnableACLoading) {\n                this.subscribeForeignStates(`${this.namespace}.control.ACLoading`);\n            }\n\n            if (this.config.EnableCustomPowerPlan && this.config.PowerPlan?.length > 0) {\n                this.subscribeForeignStates(`${this.namespace}.control.SetPowerplan`);\n                if (this.config.PowerPlanAtReload) {\n                    this.setPowerplan();\n                }\n            }\n        }\n\n        if (!this.config.Username || !this.config.Password) {\n            this.log.error(\n                `User name and/or user password empty - please check instance configuration of ${this.namespace}`,\n            );\n            return;\n        }\n\n        if (!this.config.POLL_INTERVAL && (this.config.POLL_INTERVAL < 10 || this.config.POLL_INTERVAL > 3600)) {\n            this.log.error(\n                `The poll intervall must be between 10 and 3600 secounds - please check instance configuration of ${this.namespace}`,\n            );\n            return;\n        }\n\n        try {\n            // create directory to store fetch data\n            if (!fs.existsSync(utils.getAbsoluteInstanceDataDir(this))) {\n                fs.mkdirSync(utils.getAbsoluteInstanceDataDir(this));\n                this.log.debug(`Folder created: ${this.storeData}`);\n            }\n        } catch (err: any) {\n            this.log.error(`Could not create storage directory (${utils.getAbsoluteInstanceDataDir(this)}): ${err}`);\n            return;\n        }\n\n        this.refreshDate();\n\n        if (this.config.AnalysisGrid || this.config.AnalysisHomeUsage || this.config.AnalysisSolarproduction) {\n            this.refreshAnalysis();\n        }\n    }\n\n    async loginAPI(): Promise<LoginResultResponse | null> {\n        const country =\n            this.config.API_Server === 'https://ankerpower-api-eu.anker.com'\n                ? this.config.COUNTRY\n                : this.config.COUNTRY2;\n\n        this.api = new SolixApi({\n            username: this.config.Username,\n            password: this.config.Password,\n            server: this.config.API_Server,\n            country: country,\n            log: this.log,\n        });\n        let login = await this.restoreLoginData();\n        if (login) {\n            let newneed = false;\n            //check if login token not expired\n            if (!this.myfunc.isLoginValid(login)) {\n                this.log.debug('loginAPI: token expired');\n                newneed = true;\n            }\n            //check if username in stored file the same in config\n            if (login?.email !== this.config.Username) {\n                this.log.debug('loginAPI: username are different');\n                newneed = true;\n            }\n            if (newneed) {\n                login = null;\n            }\n        }\n\n        if (login == null) {\n            try {\n                const loginResponse = await this.api.login();\n                login = loginResponse.data ?? null;\n                this.log.debug(`LoginResponseCode: ${loginResponse.code} => ${loginResponse.msg}`);\n                if (login && loginResponse.code == 0) {\n                    this.log.debug(`Write data to file`);\n                    await pfs.writeFile(this.storeData, JSON.stringify(login), 'utf-8');\n                }\n            } catch (error: any) {\n                this.log.error(`loginAPI: ${error.message}`);\n                const status = error.status;\n                if (status == 401) {\n                    if (fs.existsSync(this.storeData)) {\n                        fs.unlinkSync(this.storeData);\n                    }\n                    this.terminate('Credentials are wrong, please check and restart', status);\n                }\n\n                return null;\n            }\n        } else {\n            this.log.debug('Using auth data from savefile');\n        }\n\n        this.loggedInApi = await this.api.withLogin(login);\n\n        //check if User is Admin\n        const bindedDevice = await this.loggedInApi.bind_device();\n\n        if (bindedDevice.data.data.length > 0) {\n            this.isAdmin = true;\n            //this.log.info(`User ist Admin:`);\n        } else {\n            this.isAdmin = false;\n            //this.log.info(`User is not Admin, only read access to own devices.`);\n        }\n\n        return login;\n    }\n\n    async restoreLoginData(): Promise<LoginResultResponse | null> {\n        try {\n            this.log.debug('Try to restore data from File');\n            const data = await pfs.readFile(this.storeData, 'utf8');\n            return JSON.parse(data);\n        } catch (err: any) {\n            if (err.code === 'ENOENT') {\n                this.log.debug(`RestoreLoginData: ${err.message}`);\n                return null;\n            }\n            this.log.debug(`RestoreLoginData: ${err.message}`);\n            return null;\n        }\n    }\n\n    async refreshDate(): Promise<void> {\n        let refresh = this.config.POLL_INTERVAL;\n        try {\n            if (!this.myfunc.isLoginValid(this.loginData) || this.loginData?.email != this.config.Username) {\n                this.loginData = await this.loginAPI();\n            }\n\n            if (this.loginData) {\n                this.setApiCon(true);\n\n                await this.fetchAndPublish();\n            }\n        } catch (err: any) {\n            this.log.error(`Failed fetching or publishing printer data, Error: ${err}`);\n            this.log.debug(`Error Object: ${JSON.stringify(err)}`);\n            this.setApiCon(false);\n            refresh = this.config.POLL_INTERVAL * 5;\n            if (err.status == 401) {\n                if (fs.existsSync(this.storeData)) {\n                    fs.unlinkSync(this.storeData);\n                }\n                this.terminate('Credentials are wrong, please check and restart', err);\n            }\n        } finally {\n            if (this.refreshTimeout) {\n                this.log.debug(`refreshTimeout clear: ${this.refreshTimeout.id}`);\n                this.clearTimeout(this.refreshTimeout);\n            }\n\n            this.refreshTimeout = this.setTimeout(() => {\n                this.refreshTimeout = null;\n                this.refreshDate();\n            }, refresh * 1000);\n            this.log.debug(`Sleeping for ${refresh * 1000}ms... TimerId ${this.refreshTimeout}`);\n        }\n    }\n\n    async refreshAnalysis(): Promise<void> {\n        try {\n            if (!this.myfunc.isLoginValid(this.loginData) || this.loginData?.email != this.config.Username) {\n                this.loginData = await this.loginAPI();\n            }\n            if (this.loginData) {\n                this.setApiCon(true);\n                await this.fetchAndPublishAnalysis();\n            }\n        } catch (err: any) {\n            this.log.error(`Failed fetching or publishing analysisdata: ${err}`);\n            this.log.debug(`Error Object: ${JSON.stringify(err)}`);\n            this.setApiCon(false);\n        } finally {\n            if (this.refreshAnalysisTimeout) {\n                this.log.debug(`refreshAnalysisTimeout clear: ${this.refreshAnalysisTimeout.id}`);\n                this.clearTimeout(this.refreshAnalysisTimeout);\n            }\n\n            this.refreshAnalysisTimeout = this.setTimeout(() => {\n                this.refreshAnalysisTimeout = null;\n                this.refreshAnalysis();\n            }, 600 * 1000);\n            this.log.debug(`Analysis Sleeping for ${600 * 1000}ms... TimerId ${this.refreshAnalysisTimeout}`);\n        }\n    }\n\n    async fetchAndPublish(): Promise<void> {\n        //const loggedInApi = await this.api.withLogin(this.loginData);\n        const siteHomepage = await this.loggedInApi.siteHomepage();\n\n        let sites;\n        if (siteHomepage.data.site_list.length === 0) {\n            // Fallback for Shared Accounts\n            sites = (await this.loggedInApi.getSiteList()).data.site_list;\n        } else {\n            sites = siteHomepage.data.site_list;\n        }\n\n        for (const site of sites) {\n            const scenInfo = await this.loggedInApi.scenInfo(site.site_id);\n\n            const message = JSON.stringify(scenInfo.data);\n            /*\n            //DEGUB\n\n            await pfs.writeFile(\n                `${utils.getAbsoluteInstanceDataDir(this)}/debug.json`,\n                JSON.stringify(scenInfo.data, null, 2),\n                'utf8',\n            );\n            \n            const message = await pfs.readFile(`${utils.getAbsoluteInstanceDataDir(this)}/debug.json`, 'utf8');\n*/\n            const jsonparse = JSON.parse(message);\n\n            this.CreateOrUpdate(site.site_id, site.site_name, 'folder');\n            this.CreateOrUpdate(`${site.site_id}.EXTRA`, 'EXTRA', 'folder');\n\n            await this.CreateOrUpdate(\n                `${site.site_id}.EXTRA.RAW_JSON`,\n                'RAW_JSON',\n                'state',\n                'string',\n                'value',\n                false,\n                'undefined',\n            );\n            this.setState(`${site.site_id}.EXTRA.RAW_JSON`, { val: message, ack: true });\n            this.parseObjects(`${site.site_id}`, jsonparse);\n        }\n        this.log.debug('Published Data.');\n    }\n\n    async fetchAndPublishAnalysis(): Promise<void> {\n        //const loggedInApi = await this.api.withLogin(this.loginData);\n        const siteHomepage = await this.loggedInApi.siteHomepage();\n\n        let sites;\n        let scenInfo;\n        if (siteHomepage.data.site_list.length === 0) {\n            // Fallback for Shared Accounts\n            sites = (await this.loggedInApi.getSiteList()).data.site_list;\n        } else {\n            sites = siteHomepage.data.site_list;\n        }\n\n        for (const site of sites) {\n            const ranges = ['day', 'week'];\n\n            scenInfo = !scenInfo ? await this.loggedInApi.scenInfo(site.site_id) : scenInfo;\n            const scenInfoData = JSON.parse(JSON.stringify(scenInfo.data));\n\n            //const scenInfoData = JSON.parse(await pfs.readFile(`${utils.getAbsoluteInstanceDataDir(this)}/debug.json`, 'utf8'),);\n\n            this.CreateOrUpdate(`${site.site_id}.energyanalysis`, 'energyanalysis', 'folder');\n\n            for (const range of ranges) {\n                const date = new Date();\n                const start =\n                    range === 'week'\n                        ? new Date(date.setDate(date.getDate() - date.getDay() + (date.getDay() === 0 ? -6 : 1)))\n                        : new Date();\n                const ende = range === 'week' ? new Date(date.setDate(start.getDate() + 6)) : new Date();\n                //Solarpoduction Info\n                if (\n                    this.config.AnalysisSolarproduction &&\n                    ((range === 'day' && this.config.AnalysisSolarproductionDay) ||\n                        (range === 'week' && this.config.AnalysisSolarproductionWeek))\n                ) {\n                    try {\n                        const energyInfo = await this.loggedInApi.energyAnalysis(\n                            site.site_id,\n                            '',\n                            'week',\n                            start,\n                            ende,\n                            'solar_production',\n                        );\n\n                        this.CreateOrUpdate(\n                            `${site.site_id}.energyanalysis.solar_production`,\n                            `solar_production`,\n                            'folder',\n                        );\n                        this.CreateOrUpdate(\n                            `${site.site_id}.energyanalysis.solar_production.${range}`,\n                            `${range}`,\n                            'folder',\n                        );\n\n                        const energy_message = JSON.stringify(energyInfo.data);\n                        this.parseObjects(\n                            `${site.site_id}.energyanalysis.solar_production.${range}`,\n                            JSON.parse(energy_message),\n                        );\n\n                        await this.sleep(5000);\n                    } catch (err: any) {\n                        this.log.debug(`Published Analysis SolarProd ${range} Error: ${err.code}`);\n                    }\n                }\n                //GRID Infos\n                if (\n                    this.config.AnalysisGrid &&\n                    ((range === 'day' && this.config.AnalysisGridDay) ||\n                        (range === 'week' && this.config.AnalysisGridWeek))\n                ) {\n                    try {\n                        const gridInfo = await this.loggedInApi.energyAnalysis(\n                            site.site_id,\n                            '',\n                            'week',\n                            start,\n                            ende,\n                            'grid',\n                        );\n                        this.CreateOrUpdate(`${site.site_id}.energyanalysis.grid`, `grid`, 'folder');\n                        this.CreateOrUpdate(`${site.site_id}.energyanalysis.grid.${range}`, `${range}`, 'folder');\n                        this.parseObjects(\n                            `${site.site_id}.energyanalysis.grid.${range}`,\n                            JSON.parse(JSON.stringify(gridInfo.data)),\n                        );\n\n                        await this.sleep(5000);\n                    } catch (err: any) {\n                        this.log.debug(`Published Analysis Grid ${range} Error: ${err.code}`);\n                    }\n                }\n\n                //HOME_USAGE Infos\n                if (\n                    this.config.AnalysisHomeUsage &&\n                    ((range === 'day' && this.config.AnalysisHomeUsageDay) ||\n                        (range === 'week' && this.config.AnalysisHomeUsageWeek))\n                ) {\n                    if (scenInfoData.grid_info != null) {\n                        try {\n                            for (const i in scenInfoData.grid_info.grid_list) {\n                                if ('device_sn' in scenInfoData.grid_info.grid_list[i]) {\n                                    const device_sn = scenInfoData.grid_info.grid_list[i].device_sn;\n                                    this.CreateOrUpdate(\n                                        `${site.site_id}.energyanalysis.home_usage`,\n                                        `home_usage`,\n                                        'folder',\n                                    );\n                                    this.CreateOrUpdate(\n                                        `${site.site_id}.energyanalysis.home_usage.${device_sn}`,\n                                        `${device_sn}`,\n                                        'folder',\n                                    );\n                                    this.CreateOrUpdate(\n                                        `${site.site_id}.energyanalysis.home_usage.${device_sn}.${range}`,\n                                        `${range}`,\n                                        'folder',\n                                    );\n                                    const homeusageInfo = await this.loggedInApi.energyAnalysis(\n                                        site.site_id,\n                                        device_sn,\n                                        'week',\n                                        start,\n                                        ende,\n                                        'home_usage',\n                                    );\n\n                                    this.parseObjects(\n                                        `${site.site_id}.energyanalysis.home_usage.${device_sn}.${range}`,\n                                        JSON.parse(JSON.stringify(homeusageInfo.data)),\n                                    );\n                                }\n                            }\n                            await this.sleep(5000);\n                        } catch (err: any) {\n                            this.log.debug(`Published Analysis HomeUsage ${range} Error: ${err.code}`);\n                        }\n                    } else {\n                        this.log.debug(\n                            `Published Analysis HomeUsage ${range} Error: No smart meter found, you can disable it in config of instance`,\n                        );\n                    }\n                }\n            }\n        }\n        this.log.debug('Published Analysis Data.');\n    }\n\n    parseObjects(key: string, jOb: any): void {\n        //this.log.debug(`parseObjects : ${JSON.stringify(jOb)}`);\n        Object.entries(JSON.parse(JSON.stringify(jOb))).forEach(entries => {\n            const [id, value] = entries;\n\n            const type = this.myfunc.whatIsIt(value);\n\n            if (type === 'array') {\n                this.isArray(`${key}.${id}`, value);\n            } else if (type === 'object') {\n                this.isObject(`${key}.${id}`, value);\n            } else {\n                this.isString(`${key}.${id}`, value);\n            }\n        });\n    }\n\n    isArray(key: string, value: any): void {\n        const name = key.split('.').pop();\n        this.CreateOrUpdate(`${key}`, name, 'folder');\n\n        const array = JSON.parse(JSON.stringify(value));\n\n        //for statistics\n        if (key.includes('statistics')) {\n            Object.entries(value).forEach(subentries => {\n                const [objkey, objvalue] = subentries;\n                const json = JSON.parse(JSON.stringify(objvalue));\n                let role = 'value';\n                let idname = objkey;\n\n                if (json.type === '1') {\n                    role = 'value.energy';\n                    idname = 'total_energy';\n                } else if (json.type === '2') {\n                    role = 'value';\n                    idname = 'total_co2_savings';\n                } else if (json.type === '3') {\n                    role = 'value';\n                    idname = 'total_money_savings';\n                }\n\n                //this.log.debug(`array stat:${key}.${idname}, ${json.total}, ${json.unit}, ${role}`);\n\n                this.isString(`${key}.${idname}`, json.total, json.unit, role);\n            });\n        } else {\n            let i: any = '0';\n            array.forEach((elem: any, item: any) => {\n                if ('device_sn' in array[item]) {\n                    i = array[item].device_sn;\n                }\n                if (this.myfunc.whatIsIt(array[item]) === 'object') {\n                    this.isObject(`${key}.${i}`, array[item]);\n                } else if (this.myfunc.whatIsIt(array[item]) === 'string') {\n                    this.isString(`${key}.${i}`, array[item]);\n                }\n\n                i++;\n            });\n        }\n    }\n\n    async isObject(key: string, value: any): Promise<void> {\n        const name = key.split('.').pop();\n\n        if (value?.device_sn) {\n            //if User is Admin, set is_admin to true to all devices\n            value = { ...value, is_admin: this.isAdmin };\n\n            this.CreateOrUpdate(key, name, 'device');\n        } else {\n            this.CreateOrUpdate(key, name, 'folder');\n        }\n        //this.log.debug(`isObject: ${name}`);\n\n        //calculate battery capacity\n        if (value?.device_pn && value?.battery_power && DeviceCapacity[value?.device_pn] > 0) {\n            if (value?.battery_power) {\n                //this.log.debug(`isObject: ${key}, ${value}`);\n                const bat_power: number = value?.battery_power ? value?.battery_power : 0;\n                const num_of_batteries = value?.sub_package_num ? value?.sub_package_num : 0;\n                let cap = 0;\n                if (value?.device_pn) {\n                    cap = DeviceCapacity[value?.device_pn];\n                    //this.log.debug(`device: ${value?.device_pn} ,Capacity: ${cap}`);\n                }\n                //this.log.debug(`isObject: ${key}, BatteryBP1600Count: ${this.config.BatteryBP1600Count}, BatteryBP2700Count: ${this.config.BatteryBP2700Count}`,);\n                if (this.config.BatteryBP1600Count > 0 && num_of_batteries > 0) {\n                    cap = cap + this.config.BatteryBP1600Count * 1600;\n                    //this.log.debug(`BatteryBP1600Count: ${key},Capacity: ${cap}`);\n                }\n                if (this.config.BatteryBP2700Count > 0 && num_of_batteries > 0) {\n                    cap = cap + this.config.BatteryBP2700Count * 2700;\n                    //this.log.debug(`BatteryBP2700Count: ${key},Capacity: ${cap}`);\n                }\n                if (\n                    this.config.BatteryBP2700Count == 0 &&\n                    this.config.BatteryBP1600Count == 0 &&\n                    num_of_batteries > 0\n                ) {\n                    cap = cap + num_of_batteries * 1600;\n                }\n                //this.log.debug(`isObject: ${key}, Battery Power: ${bat_power}, Capacity: ${cap}, Number of Batteries: ${num_of_batteries}`,);\n                if (cap > 0 && bat_power > 0) {\n                    const battery_energy = Math.round((cap * bat_power) / 100);\n                    this.isString(`${key}.battery_energy`, battery_energy, 'Wh', 'value.energy');\n                }\n            }\n        }\n\n        Object.entries(value).forEach(subentries => {\n            const [objkey, objvalue] = subentries;\n            const type = this.myfunc.whatIsIt(objvalue);\n\n            if (type === 'array') {\n                this.isArray(`${key}.${objkey}`, objvalue);\n            } else if (type === 'object') {\n                this.isObject(`${key}.${objkey}`, objvalue);\n            } else {\n                this.isString(`${key}.${objkey}`, objvalue);\n            }\n        });\n    }\n\n    async isString(key: string, value: any, unit?: string, role: string = 'value'): Promise<void> {\n        //this.log.debug(`isString: ${key}`);\n\n        let parmType: ioBroker.CommonType = 'string';\n        let parmRole = role;\n        let parmUnit = unit ? unit : '';\n\n        const valType = this.myfunc.whatIsIt(value);\n\n        if (valType === 'boolean') {\n            parmType = 'boolean';\n        }\n        if (valType === 'number') {\n            parmType = 'number';\n        }\n\n        if (key.includes('time') && !key.includes('backup_info') && !key.includes('feature_switch')) {\n            parmType = 'string';\n            parmRole = 'value.time';\n\n            if (key.includes('create')) {\n                value = new Date(value * 1000).toUTCString();\n            } else if (key.includes('update')) {\n                //when Update_time not set in JSON, set it to actual time\n                value = new Date().getTime().toString();\n            }\n        }\n\n        if (key.includes('unit')) {\n            switch (value) {\n                case 'kWh':\n                case 'W':\n                    parmRole = 'value.energy';\n                    break;\n            }\n        }\n\n        if (\n            key.includes('_power') &&\n            !key.includes('display') &&\n            !key.includes('battery') &&\n            !key.includes('feature_switch')\n        ) {\n            parmType = 'number';\n            value = +value;\n            parmUnit = 'W';\n        }\n\n        if (key.includes('battery_power')) {\n            //Battery_power Level in %\n            parmRole = 'value.fill';\n            parmUnit = '%';\n            parmType = 'number';\n\n            if (key.includes('total_battery_power')) {\n                value = +value * 100;\n            } else {\n                value = +value;\n            }\n        }\n\n        const name = key.split('.').pop();\n\n        await this.CreateOrUpdate(key, name, 'state', parmType, parmRole, false, parmUnit);\n        await this.setState(key, { val: value, ack: true });\n    }\n\n    async CreateOrUpdate(\n        path: string,\n        name: string | undefined = 'Error',\n        type: 'state' | 'device' | 'folder' | 'channel',\n        commontype: ioBroker.CommonType | undefined = undefined,\n        role: string | undefined = undefined,\n        writable: boolean | undefined = undefined,\n        unit: string | undefined = undefined,\n        min: number | undefined = undefined,\n        max: number | undefined = undefined,\n        step: number | undefined = undefined,\n    ): Promise<void> {\n        let newObj: any = null;\n\n        if (type === 'state') {\n            newObj = {\n                type: type,\n                common: {\n                    name: this.myfunc.name2id(name),\n                    type: commontype,\n                    role: role,\n                    read: true,\n                    write: writable,\n                    unit: unit,\n                    min: min,\n                    max: max,\n                    step: step,\n                },\n                native: {},\n            };\n        } else {\n            newObj = {\n                type: type,\n                common: { name: name },\n                native: {},\n            };\n        }\n        await this.extendObject(this.myfunc.name2id(path), newObj);\n    }\n\n    async setApiCon(status: boolean): Promise<void> {\n        this.apiConnection = status;\n        this.setStateChangedAsync('info.apiconnection', { val: status, ack: true });\n    }\n\n    async setPowerplan(): Promise<void> {\n        try {\n            if (!this.myfunc.isLoginValid(this.loginData) || this.loginData?.email != this.config.Username) {\n                this.loginData = await this.loginAPI();\n            }\n            if (this.loginData) {\n                const powerplan: EnergyConfig = {\n                    mode_type: 3, //3 = Benutzerdefiniert Modus\n                    custom_rate_plan: [] as CustomRatePlan[],\n                    blend_plan: null,\n                    use_time: null,\n                    manual_backup: null,\n                    reserved_soc: 10,\n                    ai_ems: { enable: false, status: 3 },\n                    time_slot: null,\n                    schedule_mode: null,\n                    dynamic_price: null,\n                    /* Wird zum setzen der Powerplan noch nicht ben\u00F6tigt*/\n                    default_home_load: 200,\n                    max_load: 800,\n                    min_load: 0,\n                    step: 10,\n                };\n\n                const planMap = new Map<string, CustomRatePlan>();\n\n                for (const item of this.config.PowerPlan as any) {\n                    const ranges: CRPRange = {\n                        start_time: item.start_time,\n                        end_time: item.end_time,\n                        power: this.myfunc ? this.myfunc.rundeAufZehner(item.power) : item.power,\n                    };\n\n                    if (planMap.has(item.week)) {\n                        planMap.get(item.week)?.ranges.push(ranges);\n                    } else {\n                        planMap.set(item.week, {\n                            index: 0,\n                            week: item.week.split(',').map(Number),\n                            ranges: [ranges],\n                        });\n                    }\n                }\n                const custom_rate_plan: CustomRatePlan[] = Array.from(planMap.values()).map((plan, i) => ({\n                    ...plan,\n                    index: i,\n                }));\n\n                powerplan.custom_rate_plan = custom_rate_plan;\n                const siteID = this.config.ControlSiteID.split('.')[2];\n                //this.log.debug(`createPowerplan: ${JSON.stringify(powerplan)}`);\n                await this.loggedInApi.setSiteDeviceParam('6', siteID, JSON.stringify(powerplan));\n            }\n        } catch (err: any) {\n            this.log.error(`setParam: ${err}`);\n            this.log.debug(`Error Object: ${JSON.stringify(err)}`);\n            this.setApiCon(false);\n        }\n    }\n\n    async setACLoading(status: boolean): Promise<void> {\n        try {\n            if (!this.myfunc.isLoginValid(this.loginData) || this.loginData?.email != this.config.Username) {\n                this.loginData = await this.loginAPI();\n            }\n            if (this.loginData) {\n                const siteID = this.config.ControlSiteID.split('.')[2];\n\n                //pr\u00FCfen ob ein AC Ger\u00E4t vorhanden ist\n                const siteDetails = await this.loggedInApi.getSiteDetails(siteID);\n                this.sleep(30); //Wartezeit zwischen Anfragen\n\n                const acdevice = siteDetails.data.solarbank_list.find((device: any) =>\n                    this.myfunc.isACLoading(device.device_pn),\n                );\n\n                if (acdevice) {\n                    const rawResponse = await this.loggedInApi.getSiteDeviceParam('6', siteID);\n                    const rawData = rawResponse.data.param_data;\n\n                    const getpowerplan: EnergyConfig = JSON.parse(rawData);\n                    let start_time: number;\n                    let end_time: number;\n\n                    if (status) {\n                        start_time = Math.floor(Date.now() / 1000); // aktuelle Zeit in Sekunden\n                        end_time = start_time + 43200; // +12h ebenfalls in Sekunden\n                    } else {\n                        start_time = 0;\n                        end_time = 0;\n                    }\n\n                    const manuel_backup = {\n                        ranges: [\n                            {\n                                start_time: start_time,\n                                end_time: end_time,\n                            },\n                        ],\n                        switch: status,\n                    };\n                    getpowerplan.mode_type = 3; //3 = Benutzerdefiniert Modus\n                    getpowerplan.manual_backup = manuel_backup;\n\n                    //this.log.debug(`SetAC - Powerplan: ${JSON.stringify(getpowerplan)}`);\n\n                    await this.loggedInApi.setSiteDeviceParam('6', siteID, JSON.stringify(getpowerplan));\n                } else {\n                    this.log.warn(`setACLoading: No AC Device found in Site ${siteID}}`);\n                }\n            }\n        } catch (err: any) {\n            this.log.error(`setACLoading: ${err}`);\n            this.log.debug(`Error Object: ${JSON.stringify(err)}`);\n            this.setApiCon(false);\n        }\n    }\n\n    async setParam(value: number): Promise<void> {\n        try {\n            if (!this.myfunc.isLoginValid(this.loginData) || this.loginData?.email != this.config.Username) {\n                this.loginData = await this.loginAPI();\n            }\n            if (this.loginData) {\n                this.setApiCon(true);\n\n                const siteID = this.config.ControlSiteID.split('.')[2];\n                const { data: powerLimit } = await this.loggedInApi.getPowerLimit(siteID);\n                const roundedValue = this.myfunc.rundeAufZehner(value, powerLimit.max_power_limit);\n\n                /**/\n                const jsonstring =\n                    '{\"mode_type\":3,\"custom_rate_plan\":[{\"index\":0,\"week\":[0,1,2,3,4,5,6],\"ranges\":[{\"start_time\":\"00:00\",\"end_time\":\"24:00\",\"power\":400}]}],\"blend_plan\":null,\"default_home_load\":200,\"max_load\":800,\"min_load\":0,\"step\":10}';\n                const config: EnergyConfig = JSON.parse(jsonstring);\n\n                config.mode_type = 3; //3 = Benutzerdefiniert Modus\n                config.custom_rate_plan[0].ranges[0].power = roundedValue; //\n\n                await this.loggedInApi.setSiteDeviceParam('6', siteID, JSON.stringify(config));\n            }\n        } catch (err: any) {\n            this.log.error(`setParam: ${err}`);\n            this.log.debug(`Error Object: ${JSON.stringify(err)}`);\n            this.setApiCon(false);\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n            if (this.refreshTimeout) {\n                this.log.debug('refreshTimeout: Unload');\n                clearTimeout(this.refreshTimeout);\n            }\n            if (this.refreshAnalysisTimeout) {\n                this.log.debug('refreshAnalysisTimeout: Unload');\n                clearTimeout(this.refreshAnalysisTimeout);\n            }\n\n            callback();\n        } catch (e: any) {\n            this.log.error(`onUnload: ${e}`);\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (id === `${this.config.HomeLoadID}` && this.config.EnableControlDP && this.isAdmin) {\n            this.log.info(`HomeLoadID state changed: ${id} - ${JSON.stringify(state)}`);\n            const value = state?.val;\n            if (typeof value !== 'number') {\n                this.log.warn(`HomeLoadID state value is not a number: ${value}`);\n            } else {\n                //this.log.info(`HomeLoadID state value: ${this.rundeAufZehner(wert)}`);\n                this.setParam(value);\n            }\n        }\n        if (id === `${this.namespace}.control.ACLoading` && this.isAdmin) {\n            this.log.info(`setACLoading state changed: ${id} - ${JSON.stringify(state)}`);\n            const value = state?.val;\n            if (typeof value !== 'boolean') {\n                this.log.warn(`setACLoading state value is not a boolean: ${value}`);\n            } else {\n                this.setACLoading(value);\n            }\n        }\n        if (id === `${this.namespace}.control.SetPowerplan` && this.isAdmin) {\n            this.log.info(`setPowerplan state changed: ${id} - ${JSON.stringify(state)}`);\n            const value = state?.val;\n            if (typeof value !== 'boolean') {\n                this.log.warn(`setPowerplan state value is not a boolean: ${value}`);\n            } else {\n                this.setPowerplan();\n            }\n        }\n        /*\n        if (state) {\n            //        // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            //        // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n            */\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //    if (typeof obj === 'object' && obj.message) {\n    //        if (obj.command === 'deleteToken') {\n    //            //             // e.g. send email or pushover or whatever\n    //            this.log.info(`deleteToken - ${JSON.stringify(obj)}`);\n    //\n    //            //             // Send response in callback if required\n    //            if (obj.callback) {\n    //                this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //            }\n    //        }\n    //    }\n    //}\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Ankersolix2(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Ankersolix2())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,gBAAoC;AACpC,iBAAmD;AACnD,sBAAsF;AACtF,kBAAuB;AAGvB,MAAM,oBAAoB,MAAM,QAAQ;AAAA,EAC5B,YAAoB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,UAAmB;AAAA,EACnB;AAAA,EACA;AAAA,EAED,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AAED,SAAK,YAAY,GAAG,MAAM,2BAA2B,IAAI,CAAC;AAC1D,SAAK,YAAY;AACjB,SAAK,iBAAiB;AACtB,SAAK,yBAAyB;AAC9B,SAAK,QAAQ,CAAC,OAAe,IAAI,QAAQ,aAAW,WAAW,SAAS,EAAE,CAAC;AAC3E,SAAK,MAAM;AACX,SAAK,gBAAgB;AACrB,SAAK,SAAS,IAAI,mBAAO,IAAI;AAC7B,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAyB;AAjD3C;AAoDQ,SAAK,YAAY,MAAM,KAAK,SAAS;AAErC,QAAI,OAAO,KAAK,OAAO,eAAe,YAAY,KAAK,OAAO,WAAW,KAAK,MAAM,IAAI;AACpF,UAAI,KAAK,OAAO,iBAAiB;AAC7B,aAAK,uBAAuB,GAAG,KAAK,OAAO,UAAU,EAAE;AAAA,MAC3D;AAEA,UAAI,KAAK,OAAO,iBAAiB;AAC7B,aAAK,uBAAuB,GAAG,KAAK,SAAS,oBAAoB;AAAA,MACrE;AAEA,UAAI,KAAK,OAAO,2BAAyB,UAAK,OAAO,cAAZ,mBAAuB,UAAS,GAAG;AACxE,aAAK,uBAAuB,GAAG,KAAK,SAAS,uBAAuB;AACpE,YAAI,KAAK,OAAO,mBAAmB;AAC/B,eAAK,aAAa;AAAA,QACtB;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,OAAO,YAAY,CAAC,KAAK,OAAO,UAAU;AAChD,WAAK,IAAI;AAAA,QACL,iFAAiF,KAAK,SAAS;AAAA,MACnG;AACA;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,OAAO,kBAAkB,KAAK,OAAO,gBAAgB,MAAM,KAAK,OAAO,gBAAgB,OAAO;AACpG,WAAK,IAAI;AAAA,QACL,oGAAoG,KAAK,SAAS;AAAA,MACtH;AACA;AAAA,IACJ;AAEA,QAAI;AAEA,UAAI,CAAC,UAAAA,QAAG,WAAW,MAAM,2BAA2B,IAAI,CAAC,GAAG;AACxD,kBAAAA,QAAG,UAAU,MAAM,2BAA2B,IAAI,CAAC;AACnD,aAAK,IAAI,MAAM,mBAAmB,KAAK,SAAS,EAAE;AAAA,MACtD;AAAA,IACJ,SAAS,KAAU;AACf,WAAK,IAAI,MAAM,uCAAuC,MAAM,2BAA2B,IAAI,CAAC,MAAM,GAAG,EAAE;AACvG;AAAA,IACJ;AAEA,SAAK,YAAY;AAEjB,QAAI,KAAK,OAAO,gBAAgB,KAAK,OAAO,qBAAqB,KAAK,OAAO,yBAAyB;AAClG,WAAK,gBAAgB;AAAA,IACzB;AAAA,EACJ;AAAA,EAEA,MAAM,WAAgD;AAvG1D;AAwGQ,UAAM,UACF,KAAK,OAAO,eAAe,wCACrB,KAAK,OAAO,UACZ,KAAK,OAAO;AAEtB,SAAK,MAAM,IAAI,oBAAS;AAAA,MACpB,UAAU,KAAK,OAAO;AAAA,MACtB,UAAU,KAAK,OAAO;AAAA,MACtB,QAAQ,KAAK,OAAO;AAAA,MACpB;AAAA,MACA,KAAK,KAAK;AAAA,IACd,CAAC;AACD,QAAI,QAAQ,MAAM,KAAK,iBAAiB;AACxC,QAAI,OAAO;AACP,UAAI,UAAU;AAEd,UAAI,CAAC,KAAK,OAAO,aAAa,KAAK,GAAG;AAClC,aAAK,IAAI,MAAM,yBAAyB;AACxC,kBAAU;AAAA,MACd;AAEA,WAAI,+BAAO,WAAU,KAAK,OAAO,UAAU;AACvC,aAAK,IAAI,MAAM,kCAAkC;AACjD,kBAAU;AAAA,MACd;AACA,UAAI,SAAS;AACT,gBAAQ;AAAA,MACZ;AAAA,IACJ;AAEA,QAAI,SAAS,MAAM;AACf,UAAI;AACA,cAAM,gBAAgB,MAAM,KAAK,IAAI,MAAM;AAC3C,iBAAQ,mBAAc,SAAd,YAAsB;AAC9B,aAAK,IAAI,MAAM,sBAAsB,cAAc,IAAI,OAAO,cAAc,GAAG,EAAE;AACjF,YAAI,SAAS,cAAc,QAAQ,GAAG;AAClC,eAAK,IAAI,MAAM,oBAAoB;AACnC,gBAAM,UAAAC,SAAI,UAAU,KAAK,WAAW,KAAK,UAAU,KAAK,GAAG,OAAO;AAAA,QACtE;AAAA,MACJ,SAAS,OAAY;AACjB,aAAK,IAAI,MAAM,aAAa,MAAM,OAAO,EAAE;AAC3C,cAAM,SAAS,MAAM;AACrB,YAAI,UAAU,KAAK;AACf,cAAI,UAAAD,QAAG,WAAW,KAAK,SAAS,GAAG;AAC/B,sBAAAA,QAAG,WAAW,KAAK,SAAS;AAAA,UAChC;AACA,eAAK,UAAU,mDAAmD,MAAM;AAAA,QAC5E;AAEA,eAAO;AAAA,MACX;AAAA,IACJ,OAAO;AACH,WAAK,IAAI,MAAM,+BAA+B;AAAA,IAClD;AAEA,SAAK,cAAc,MAAM,KAAK,IAAI,UAAU,KAAK;AAGjD,UAAM,eAAe,MAAM,KAAK,YAAY,YAAY;AAExD,QAAI,aAAa,KAAK,KAAK,SAAS,GAAG;AACnC,WAAK,UAAU;AAAA,IAEnB,OAAO;AACH,WAAK,UAAU;AAAA,IAEnB;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,mBAAwD;AAC1D,QAAI;AACA,WAAK,IAAI,MAAM,+BAA+B;AAC9C,YAAM,OAAO,MAAM,UAAAC,SAAI,SAAS,KAAK,WAAW,MAAM;AACtD,aAAO,KAAK,MAAM,IAAI;AAAA,IAC1B,SAAS,KAAU;AACf,UAAI,IAAI,SAAS,UAAU;AACvB,aAAK,IAAI,MAAM,qBAAqB,IAAI,OAAO,EAAE;AACjD,eAAO;AAAA,MACX;AACA,WAAK,IAAI,MAAM,qBAAqB,IAAI,OAAO,EAAE;AACjD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,MAAM,cAA6B;AA9LvC;AA+LQ,QAAI,UAAU,KAAK,OAAO;AAC1B,QAAI;AACA,UAAI,CAAC,KAAK,OAAO,aAAa,KAAK,SAAS,OAAK,UAAK,cAAL,mBAAgB,UAAS,KAAK,OAAO,UAAU;AAC5F,aAAK,YAAY,MAAM,KAAK,SAAS;AAAA,MACzC;AAEA,UAAI,KAAK,WAAW;AAChB,aAAK,UAAU,IAAI;AAEnB,cAAM,KAAK,gBAAgB;AAAA,MAC/B;AAAA,IACJ,SAAS,KAAU;AACf,WAAK,IAAI,MAAM,sDAAsD,GAAG,EAAE;AAC1E,WAAK,IAAI,MAAM,iBAAiB,KAAK,UAAU,GAAG,CAAC,EAAE;AACrD,WAAK,UAAU,KAAK;AACpB,gBAAU,KAAK,OAAO,gBAAgB;AACtC,UAAI,IAAI,UAAU,KAAK;AACnB,YAAI,UAAAD,QAAG,WAAW,KAAK,SAAS,GAAG;AAC/B,oBAAAA,QAAG,WAAW,KAAK,SAAS;AAAA,QAChC;AACA,aAAK,UAAU,mDAAmD,GAAG;AAAA,MACzE;AAAA,IACJ,UAAE;AACE,UAAI,KAAK,gBAAgB;AACrB,aAAK,IAAI,MAAM,yBAAyB,KAAK,eAAe,EAAE,EAAE;AAChE,aAAK,aAAa,KAAK,cAAc;AAAA,MACzC;AAEA,WAAK,iBAAiB,KAAK,WAAW,MAAM;AACxC,aAAK,iBAAiB;AACtB,aAAK,YAAY;AAAA,MACrB,GAAG,UAAU,GAAI;AACjB,WAAK,IAAI,MAAM,gBAAgB,UAAU,GAAI,iBAAiB,KAAK,cAAc,EAAE;AAAA,IACvF;AAAA,EACJ;AAAA,EAEA,MAAM,kBAAiC;AAnO3C;AAoOQ,QAAI;AACA,UAAI,CAAC,KAAK,OAAO,aAAa,KAAK,SAAS,OAAK,UAAK,cAAL,mBAAgB,UAAS,KAAK,OAAO,UAAU;AAC5F,aAAK,YAAY,MAAM,KAAK,SAAS;AAAA,MACzC;AACA,UAAI,KAAK,WAAW;AAChB,aAAK,UAAU,IAAI;AACnB,cAAM,KAAK,wBAAwB;AAAA,MACvC;AAAA,IACJ,SAAS,KAAU;AACf,WAAK,IAAI,MAAM,+CAA+C,GAAG,EAAE;AACnE,WAAK,IAAI,MAAM,iBAAiB,KAAK,UAAU,GAAG,CAAC,EAAE;AACrD,WAAK,UAAU,KAAK;AAAA,IACxB,UAAE;AACE,UAAI,KAAK,wBAAwB;AAC7B,aAAK,IAAI,MAAM,iCAAiC,KAAK,uBAAuB,EAAE,EAAE;AAChF,aAAK,aAAa,KAAK,sBAAsB;AAAA,MACjD;AAEA,WAAK,yBAAyB,KAAK,WAAW,MAAM;AAChD,aAAK,yBAAyB;AAC9B,aAAK,gBAAgB;AAAA,MACzB,GAAG,MAAM,GAAI;AACb,WAAK,IAAI,MAAM,yBAAyB,MAAM,GAAI,iBAAiB,KAAK,sBAAsB,EAAE;AAAA,IACpG;AAAA,EACJ;AAAA,EAEA,MAAM,kBAAiC;AAEnC,UAAM,eAAe,MAAM,KAAK,YAAY,aAAa;AAEzD,QAAI;AACJ,QAAI,aAAa,KAAK,UAAU,WAAW,GAAG;AAE1C,eAAS,MAAM,KAAK,YAAY,YAAY,GAAG,KAAK;AAAA,IACxD,OAAO;AACH,cAAQ,aAAa,KAAK;AAAA,IAC9B;AAEA,eAAW,QAAQ,OAAO;AACtB,YAAM,WAAW,MAAM,KAAK,YAAY,SAAS,KAAK,OAAO;AAE7D,YAAM,UAAU,KAAK,UAAU,SAAS,IAAI;AAY5C,YAAM,YAAY,KAAK,MAAM,OAAO;AAEpC,WAAK,eAAe,KAAK,SAAS,KAAK,WAAW,QAAQ;AAC1D,WAAK,eAAe,GAAG,KAAK,OAAO,UAAU,SAAS,QAAQ;AAE9D,YAAM,KAAK;AAAA,QACP,GAAG,KAAK,OAAO;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AACA,WAAK,SAAS,GAAG,KAAK,OAAO,mBAAmB,EAAE,KAAK,SAAS,KAAK,KAAK,CAAC;AAC3E,WAAK,aAAa,GAAG,KAAK,OAAO,IAAI,SAAS;AAAA,IAClD;AACA,SAAK,IAAI,MAAM,iBAAiB;AAAA,EACpC;AAAA,EAEA,MAAM,0BAAyC;AAE3C,UAAM,eAAe,MAAM,KAAK,YAAY,aAAa;AAEzD,QAAI;AACJ,QAAI;AACJ,QAAI,aAAa,KAAK,UAAU,WAAW,GAAG;AAE1C,eAAS,MAAM,KAAK,YAAY,YAAY,GAAG,KAAK;AAAA,IACxD,OAAO;AACH,cAAQ,aAAa,KAAK;AAAA,IAC9B;AAEA,eAAW,QAAQ,OAAO;AACtB,YAAM,SAAS,CAAC,OAAO,MAAM;AAE7B,iBAAW,CAAC,WAAW,MAAM,KAAK,YAAY,SAAS,KAAK,OAAO,IAAI;AACvE,YAAM,eAAe,KAAK,MAAM,KAAK,UAAU,SAAS,IAAI,CAAC;AAI7D,WAAK,eAAe,GAAG,KAAK,OAAO,mBAAmB,kBAAkB,QAAQ;AAEhF,iBAAW,SAAS,QAAQ;AACxB,cAAM,OAAO,oBAAI,KAAK;AACtB,cAAM,QACF,UAAU,SACJ,IAAI,KAAK,KAAK,QAAQ,KAAK,QAAQ,IAAI,KAAK,OAAO,KAAK,KAAK,OAAO,MAAM,IAAI,KAAK,EAAE,CAAC,IACtF,oBAAI,KAAK;AACnB,cAAM,OAAO,UAAU,SAAS,IAAI,KAAK,KAAK,QAAQ,MAAM,QAAQ,IAAI,CAAC,CAAC,IAAI,oBAAI,KAAK;AAEvF,YACI,KAAK,OAAO,4BACV,UAAU,SAAS,KAAK,OAAO,8BAC5B,UAAU,UAAU,KAAK,OAAO,8BACvC;AACE,cAAI;AACA,kBAAM,aAAa,MAAM,KAAK,YAAY;AAAA,cACtC,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACJ;AAEA,iBAAK;AAAA,cACD,GAAG,KAAK,OAAO;AAAA,cACf;AAAA,cACA;AAAA,YACJ;AACA,iBAAK;AAAA,cACD,GAAG,KAAK,OAAO,oCAAoC,KAAK;AAAA,cACxD,GAAG,KAAK;AAAA,cACR;AAAA,YACJ;AAEA,kBAAM,iBAAiB,KAAK,UAAU,WAAW,IAAI;AACrD,iBAAK;AAAA,cACD,GAAG,KAAK,OAAO,oCAAoC,KAAK;AAAA,cACxD,KAAK,MAAM,cAAc;AAAA,YAC7B;AAEA,kBAAM,KAAK,MAAM,GAAI;AAAA,UACzB,SAAS,KAAU;AACf,iBAAK,IAAI,MAAM,gCAAgC,KAAK,WAAW,IAAI,IAAI,EAAE;AAAA,UAC7E;AAAA,QACJ;AAEA,YACI,KAAK,OAAO,iBACV,UAAU,SAAS,KAAK,OAAO,mBAC5B,UAAU,UAAU,KAAK,OAAO,mBACvC;AACE,cAAI;AACA,kBAAM,WAAW,MAAM,KAAK,YAAY;AAAA,cACpC,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACJ;AACA,iBAAK,eAAe,GAAG,KAAK,OAAO,wBAAwB,QAAQ,QAAQ;AAC3E,iBAAK,eAAe,GAAG,KAAK,OAAO,wBAAwB,KAAK,IAAI,GAAG,KAAK,IAAI,QAAQ;AACxF,iBAAK;AAAA,cACD,GAAG,KAAK,OAAO,wBAAwB,KAAK;AAAA,cAC5C,KAAK,MAAM,KAAK,UAAU,SAAS,IAAI,CAAC;AAAA,YAC5C;AAEA,kBAAM,KAAK,MAAM,GAAI;AAAA,UACzB,SAAS,KAAU;AACf,iBAAK,IAAI,MAAM,2BAA2B,KAAK,WAAW,IAAI,IAAI,EAAE;AAAA,UACxE;AAAA,QACJ;AAGA,YACI,KAAK,OAAO,sBACV,UAAU,SAAS,KAAK,OAAO,wBAC5B,UAAU,UAAU,KAAK,OAAO,wBACvC;AACE,cAAI,aAAa,aAAa,MAAM;AAChC,gBAAI;AACA,yBAAW,KAAK,aAAa,UAAU,WAAW;AAC9C,oBAAI,eAAe,aAAa,UAAU,UAAU,CAAC,GAAG;AACpD,wBAAM,YAAY,aAAa,UAAU,UAAU,CAAC,EAAE;AACtD,uBAAK;AAAA,oBACD,GAAG,KAAK,OAAO;AAAA,oBACf;AAAA,oBACA;AAAA,kBACJ;AACA,uBAAK;AAAA,oBACD,GAAG,KAAK,OAAO,8BAA8B,SAAS;AAAA,oBACtD,GAAG,SAAS;AAAA,oBACZ;AAAA,kBACJ;AACA,uBAAK;AAAA,oBACD,GAAG,KAAK,OAAO,8BAA8B,SAAS,IAAI,KAAK;AAAA,oBAC/D,GAAG,KAAK;AAAA,oBACR;AAAA,kBACJ;AACA,wBAAM,gBAAgB,MAAM,KAAK,YAAY;AAAA,oBACzC,KAAK;AAAA,oBACL;AAAA,oBACA;AAAA,oBACA;AAAA,oBACA;AAAA,oBACA;AAAA,kBACJ;AAEA,uBAAK;AAAA,oBACD,GAAG,KAAK,OAAO,8BAA8B,SAAS,IAAI,KAAK;AAAA,oBAC/D,KAAK,MAAM,KAAK,UAAU,cAAc,IAAI,CAAC;AAAA,kBACjD;AAAA,gBACJ;AAAA,cACJ;AACA,oBAAM,KAAK,MAAM,GAAI;AAAA,YACzB,SAAS,KAAU;AACf,mBAAK,IAAI,MAAM,gCAAgC,KAAK,WAAW,IAAI,IAAI,EAAE;AAAA,YAC7E;AAAA,UACJ,OAAO;AACH,iBAAK,IAAI;AAAA,cACL,gCAAgC,KAAK;AAAA,YACzC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,IAAI,MAAM,0BAA0B;AAAA,EAC7C;AAAA,EAEA,aAAa,KAAa,KAAgB;AAEtC,WAAO,QAAQ,KAAK,MAAM,KAAK,UAAU,GAAG,CAAC,CAAC,EAAE,QAAQ,aAAW;AAC/D,YAAM,CAAC,IAAI,KAAK,IAAI;AAEpB,YAAM,OAAO,KAAK,OAAO,SAAS,KAAK;AAEvC,UAAI,SAAS,SAAS;AAClB,aAAK,QAAQ,GAAG,GAAG,IAAI,EAAE,IAAI,KAAK;AAAA,MACtC,WAAW,SAAS,UAAU;AAC1B,aAAK,SAAS,GAAG,GAAG,IAAI,EAAE,IAAI,KAAK;AAAA,MACvC,OAAO;AACH,aAAK,SAAS,GAAG,GAAG,IAAI,EAAE,IAAI,KAAK;AAAA,MACvC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,QAAQ,KAAa,OAAkB;AACnC,UAAM,OAAO,IAAI,MAAM,GAAG,EAAE,IAAI;AAChC,SAAK,eAAe,GAAG,GAAG,IAAI,MAAM,QAAQ;AAE5C,UAAM,QAAQ,KAAK,MAAM,KAAK,UAAU,KAAK,CAAC;AAG9C,QAAI,IAAI,SAAS,YAAY,GAAG;AAC5B,aAAO,QAAQ,KAAK,EAAE,QAAQ,gBAAc;AACxC,cAAM,CAAC,QAAQ,QAAQ,IAAI;AAC3B,cAAM,OAAO,KAAK,MAAM,KAAK,UAAU,QAAQ,CAAC;AAChD,YAAI,OAAO;AACX,YAAI,SAAS;AAEb,YAAI,KAAK,SAAS,KAAK;AACnB,iBAAO;AACP,mBAAS;AAAA,QACb,WAAW,KAAK,SAAS,KAAK;AAC1B,iBAAO;AACP,mBAAS;AAAA,QACb,WAAW,KAAK,SAAS,KAAK;AAC1B,iBAAO;AACP,mBAAS;AAAA,QACb;AAIA,aAAK,SAAS,GAAG,GAAG,IAAI,MAAM,IAAI,KAAK,OAAO,KAAK,MAAM,IAAI;AAAA,MACjE,CAAC;AAAA,IACL,OAAO;AACH,UAAI,IAAS;AACb,YAAM,QAAQ,CAAC,MAAW,SAAc;AACpC,YAAI,eAAe,MAAM,IAAI,GAAG;AAC5B,cAAI,MAAM,IAAI,EAAE;AAAA,QACpB;AACA,YAAI,KAAK,OAAO,SAAS,MAAM,IAAI,CAAC,MAAM,UAAU;AAChD,eAAK,SAAS,GAAG,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC;AAAA,QAC5C,WAAW,KAAK,OAAO,SAAS,MAAM,IAAI,CAAC,MAAM,UAAU;AACvD,eAAK,SAAS,GAAG,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC;AAAA,QAC5C;AAEA;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEA,MAAM,SAAS,KAAa,OAA2B;AACnD,UAAM,OAAO,IAAI,MAAM,GAAG,EAAE,IAAI;AAEhC,QAAI,+BAAO,WAAW;AAElB,cAAQ,EAAE,GAAG,OAAO,UAAU,KAAK,QAAQ;AAE3C,WAAK,eAAe,KAAK,MAAM,QAAQ;AAAA,IAC3C,OAAO;AACH,WAAK,eAAe,KAAK,MAAM,QAAQ;AAAA,IAC3C;AAIA,SAAI,+BAAO,eAAa,+BAAO,kBAAiB,+BAAe,+BAAO,SAAS,IAAI,GAAG;AAClF,UAAI,+BAAO,eAAe;AAEtB,cAAM,aAAoB,+BAAO,iBAAgB,+BAAO,gBAAgB;AACxE,cAAM,oBAAmB,+BAAO,mBAAkB,+BAAO,kBAAkB;AAC3E,YAAI,MAAM;AACV,YAAI,+BAAO,WAAW;AAClB,gBAAM,+BAAe,+BAAO,SAAS;AAAA,QAEzC;AAEA,YAAI,KAAK,OAAO,qBAAqB,KAAK,mBAAmB,GAAG;AAC5D,gBAAM,MAAM,KAAK,OAAO,qBAAqB;AAAA,QAEjD;AACA,YAAI,KAAK,OAAO,qBAAqB,KAAK,mBAAmB,GAAG;AAC5D,gBAAM,MAAM,KAAK,OAAO,qBAAqB;AAAA,QAEjD;AACA,YACI,KAAK,OAAO,sBAAsB,KAClC,KAAK,OAAO,sBAAsB,KAClC,mBAAmB,GACrB;AACE,gBAAM,MAAM,mBAAmB;AAAA,QACnC;AAEA,YAAI,MAAM,KAAK,YAAY,GAAG;AAC1B,gBAAM,iBAAiB,KAAK,MAAO,MAAM,YAAa,GAAG;AACzD,eAAK,SAAS,GAAG,GAAG,mBAAmB,gBAAgB,MAAM,cAAc;AAAA,QAC/E;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO,QAAQ,KAAK,EAAE,QAAQ,gBAAc;AACxC,YAAM,CAAC,QAAQ,QAAQ,IAAI;AAC3B,YAAM,OAAO,KAAK,OAAO,SAAS,QAAQ;AAE1C,UAAI,SAAS,SAAS;AAClB,aAAK,QAAQ,GAAG,GAAG,IAAI,MAAM,IAAI,QAAQ;AAAA,MAC7C,WAAW,SAAS,UAAU;AAC1B,aAAK,SAAS,GAAG,GAAG,IAAI,MAAM,IAAI,QAAQ;AAAA,MAC9C,OAAO;AACH,aAAK,SAAS,GAAG,GAAG,IAAI,MAAM,IAAI,QAAQ;AAAA,MAC9C;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,SAAS,KAAa,OAAY,MAAe,OAAe,SAAwB;AAG1F,QAAI,WAAgC;AACpC,QAAI,WAAW;AACf,QAAI,WAAW,OAAO,OAAO;AAE7B,UAAM,UAAU,KAAK,OAAO,SAAS,KAAK;AAE1C,QAAI,YAAY,WAAW;AACvB,iBAAW;AAAA,IACf;AACA,QAAI,YAAY,UAAU;AACtB,iBAAW;AAAA,IACf;AAEA,QAAI,IAAI,SAAS,MAAM,KAAK,CAAC,IAAI,SAAS,aAAa,KAAK,CAAC,IAAI,SAAS,gBAAgB,GAAG;AACzF,iBAAW;AACX,iBAAW;AAEX,UAAI,IAAI,SAAS,QAAQ,GAAG;AACxB,gBAAQ,IAAI,KAAK,QAAQ,GAAI,EAAE,YAAY;AAAA,MAC/C,WAAW,IAAI,SAAS,QAAQ,GAAG;AAE/B,iBAAQ,oBAAI,KAAK,GAAE,QAAQ,EAAE,SAAS;AAAA,MAC1C;AAAA,IACJ;AAEA,QAAI,IAAI,SAAS,MAAM,GAAG;AACtB,cAAQ,OAAO;AAAA,QACX,KAAK;AAAA,QACL,KAAK;AACD,qBAAW;AACX;AAAA,MACR;AAAA,IACJ;AAEA,QACI,IAAI,SAAS,QAAQ,KACrB,CAAC,IAAI,SAAS,SAAS,KACvB,CAAC,IAAI,SAAS,SAAS,KACvB,CAAC,IAAI,SAAS,gBAAgB,GAChC;AACE,iBAAW;AACX,cAAQ,CAAC;AACT,iBAAW;AAAA,IACf;AAEA,QAAI,IAAI,SAAS,eAAe,GAAG;AAE/B,iBAAW;AACX,iBAAW;AACX,iBAAW;AAEX,UAAI,IAAI,SAAS,qBAAqB,GAAG;AACrC,gBAAQ,CAAC,QAAQ;AAAA,MACrB,OAAO;AACH,gBAAQ,CAAC;AAAA,MACb;AAAA,IACJ;AAEA,UAAM,OAAO,IAAI,MAAM,GAAG,EAAE,IAAI;AAEhC,UAAM,KAAK,eAAe,KAAK,MAAM,SAAS,UAAU,UAAU,OAAO,QAAQ;AACjF,UAAM,KAAK,SAAS,KAAK,EAAE,KAAK,OAAO,KAAK,KAAK,CAAC;AAAA,EACtD;AAAA,EAEA,MAAM,eACF,MACA,OAA2B,SAC3B,MACA,aAA8C,QAC9C,OAA2B,QAC3B,WAAgC,QAChC,OAA2B,QAC3B,MAA0B,QAC1B,MAA0B,QAC1B,OAA2B,QACd;AACb,QAAI,SAAc;AAElB,QAAI,SAAS,SAAS;AAClB,eAAS;AAAA,QACL;AAAA,QACA,QAAQ;AAAA,UACJ,MAAM,KAAK,OAAO,QAAQ,IAAI;AAAA,UAC9B,MAAM;AAAA,UACN;AAAA,UACA,MAAM;AAAA,UACN,OAAO;AAAA,UACP;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAAA,QACA,QAAQ,CAAC;AAAA,MACb;AAAA,IACJ,OAAO;AACH,eAAS;AAAA,QACL;AAAA,QACA,QAAQ,EAAE,KAAW;AAAA,QACrB,QAAQ,CAAC;AAAA,MACb;AAAA,IACJ;AACA,UAAM,KAAK,aAAa,KAAK,OAAO,QAAQ,IAAI,GAAG,MAAM;AAAA,EAC7D;AAAA,EAEA,MAAM,UAAU,QAAgC;AAC5C,SAAK,gBAAgB;AACrB,SAAK,qBAAqB,sBAAsB,EAAE,KAAK,QAAQ,KAAK,KAAK,CAAC;AAAA,EAC9E;AAAA,EAEA,MAAM,eAA8B;AAlrBxC;AAmrBQ,QAAI;AACA,UAAI,CAAC,KAAK,OAAO,aAAa,KAAK,SAAS,OAAK,UAAK,cAAL,mBAAgB,UAAS,KAAK,OAAO,UAAU;AAC5F,aAAK,YAAY,MAAM,KAAK,SAAS;AAAA,MACzC;AACA,UAAI,KAAK,WAAW;AAChB,cAAM,YAA0B;AAAA,UAC5B,WAAW;AAAA;AAAA,UACX,kBAAkB,CAAC;AAAA,UACnB,YAAY;AAAA,UACZ,UAAU;AAAA,UACV,eAAe;AAAA,UACf,cAAc;AAAA,UACd,QAAQ,EAAE,QAAQ,OAAO,QAAQ,EAAE;AAAA,UACnC,WAAW;AAAA,UACX,eAAe;AAAA,UACf,eAAe;AAAA;AAAA,UAEf,mBAAmB;AAAA,UACnB,UAAU;AAAA,UACV,UAAU;AAAA,UACV,MAAM;AAAA,QACV;AAEA,cAAM,UAAU,oBAAI,IAA4B;AAEhD,mBAAW,QAAQ,KAAK,OAAO,WAAkB;AAC7C,gBAAM,SAAmB;AAAA,YACrB,YAAY,KAAK;AAAA,YACjB,UAAU,KAAK;AAAA,YACf,OAAO,KAAK,SAAS,KAAK,OAAO,eAAe,KAAK,KAAK,IAAI,KAAK;AAAA,UACvE;AAEA,cAAI,QAAQ,IAAI,KAAK,IAAI,GAAG;AACxB,0BAAQ,IAAI,KAAK,IAAI,MAArB,mBAAwB,OAAO,KAAK;AAAA,UACxC,OAAO;AACH,oBAAQ,IAAI,KAAK,MAAM;AAAA,cACnB,OAAO;AAAA,cACP,MAAM,KAAK,KAAK,MAAM,GAAG,EAAE,IAAI,MAAM;AAAA,cACrC,QAAQ,CAAC,MAAM;AAAA,YACnB,CAAC;AAAA,UACL;AAAA,QACJ;AACA,cAAM,mBAAqC,MAAM,KAAK,QAAQ,OAAO,CAAC,EAAE,IAAI,CAAC,MAAM,OAAO;AAAA,UACtF,GAAG;AAAA,UACH,OAAO;AAAA,QACX,EAAE;AAEF,kBAAU,mBAAmB;AAC7B,cAAM,SAAS,KAAK,OAAO,cAAc,MAAM,GAAG,EAAE,CAAC;AAErD,cAAM,KAAK,YAAY,mBAAmB,KAAK,QAAQ,KAAK,UAAU,SAAS,CAAC;AAAA,MACpF;AAAA,IACJ,SAAS,KAAU;AACf,WAAK,IAAI,MAAM,aAAa,GAAG,EAAE;AACjC,WAAK,IAAI,MAAM,iBAAiB,KAAK,UAAU,GAAG,CAAC,EAAE;AACrD,WAAK,UAAU,KAAK;AAAA,IACxB;AAAA,EACJ;AAAA,EAEA,MAAM,aAAa,QAAgC;AA9uBvD;AA+uBQ,QAAI;AACA,UAAI,CAAC,KAAK,OAAO,aAAa,KAAK,SAAS,OAAK,UAAK,cAAL,mBAAgB,UAAS,KAAK,OAAO,UAAU;AAC5F,aAAK,YAAY,MAAM,KAAK,SAAS;AAAA,MACzC;AACA,UAAI,KAAK,WAAW;AAChB,cAAM,SAAS,KAAK,OAAO,cAAc,MAAM,GAAG,EAAE,CAAC;AAGrD,cAAM,cAAc,MAAM,KAAK,YAAY,eAAe,MAAM;AAChE,aAAK,MAAM,EAAE;AAEb,cAAM,WAAW,YAAY,KAAK,eAAe;AAAA,UAAK,CAAC,WACnD,KAAK,OAAO,YAAY,OAAO,SAAS;AAAA,QAC5C;AAEA,YAAI,UAAU;AACV,gBAAM,cAAc,MAAM,KAAK,YAAY,mBAAmB,KAAK,MAAM;AACzE,gBAAM,UAAU,YAAY,KAAK;AAEjC,gBAAM,eAA6B,KAAK,MAAM,OAAO;AACrD,cAAI;AACJ,cAAI;AAEJ,cAAI,QAAQ;AACR,yBAAa,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI;AACzC,uBAAW,aAAa;AAAA,UAC5B,OAAO;AACH,yBAAa;AACb,uBAAW;AAAA,UACf;AAEA,gBAAM,gBAAgB;AAAA,YAClB,QAAQ;AAAA,cACJ;AAAA,gBACI;AAAA,gBACA;AAAA,cACJ;AAAA,YACJ;AAAA,YACA,QAAQ;AAAA,UACZ;AACA,uBAAa,YAAY;AACzB,uBAAa,gBAAgB;AAI7B,gBAAM,KAAK,YAAY,mBAAmB,KAAK,QAAQ,KAAK,UAAU,YAAY,CAAC;AAAA,QACvF,OAAO;AACH,eAAK,IAAI,KAAK,4CAA4C,MAAM,GAAG;AAAA,QACvE;AAAA,MACJ;AAAA,IACJ,SAAS,KAAU;AACf,WAAK,IAAI,MAAM,iBAAiB,GAAG,EAAE;AACrC,WAAK,IAAI,MAAM,iBAAiB,KAAK,UAAU,GAAG,CAAC,EAAE;AACrD,WAAK,UAAU,KAAK;AAAA,IACxB;AAAA,EACJ;AAAA,EAEA,MAAM,SAAS,OAA8B;AAxyBjD;AAyyBQ,QAAI;AACA,UAAI,CAAC,KAAK,OAAO,aAAa,KAAK,SAAS,OAAK,UAAK,cAAL,mBAAgB,UAAS,KAAK,OAAO,UAAU;AAC5F,aAAK,YAAY,MAAM,KAAK,SAAS;AAAA,MACzC;AACA,UAAI,KAAK,WAAW;AAChB,aAAK,UAAU,IAAI;AAEnB,cAAM,SAAS,KAAK,OAAO,cAAc,MAAM,GAAG,EAAE,CAAC;AACrD,cAAM,EAAE,MAAM,WAAW,IAAI,MAAM,KAAK,YAAY,cAAc,MAAM;AACxE,cAAM,eAAe,KAAK,OAAO,eAAe,OAAO,WAAW,eAAe;AAGjF,cAAM,aACF;AACJ,cAAM,SAAuB,KAAK,MAAM,UAAU;AAElD,eAAO,YAAY;AACnB,eAAO,iBAAiB,CAAC,EAAE,OAAO,CAAC,EAAE,QAAQ;AAE7C,cAAM,KAAK,YAAY,mBAAmB,KAAK,QAAQ,KAAK,UAAU,MAAM,CAAC;AAAA,MACjF;AAAA,IACJ,SAAS,KAAU;AACf,WAAK,IAAI,MAAM,aAAa,GAAG,EAAE;AACjC,WAAK,IAAI,MAAM,iBAAiB,KAAK,UAAU,GAAG,CAAC,EAAE;AACrD,WAAK,UAAU,KAAK;AAAA,IACxB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKQ,SAAS,UAA4B;AACzC,QAAI;AAMA,UAAI,KAAK,gBAAgB;AACrB,aAAK,IAAI,MAAM,wBAAwB;AACvC,qBAAa,KAAK,cAAc;AAAA,MACpC;AACA,UAAI,KAAK,wBAAwB;AAC7B,aAAK,IAAI,MAAM,gCAAgC;AAC/C,qBAAa,KAAK,sBAAsB;AAAA,MAC5C;AAEA,eAAS;AAAA,IACb,SAAS,GAAQ;AACb,WAAK,IAAI,MAAM,aAAa,CAAC,EAAE;AAC/B,eAAS;AAAA,IACb;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO,GAAG,KAAK,OAAO,UAAU,MAAM,KAAK,OAAO,mBAAmB,KAAK,SAAS;AACnF,WAAK,IAAI,KAAK,6BAA6B,EAAE,MAAM,KAAK,UAAU,KAAK,CAAC,EAAE;AAC1E,YAAM,QAAQ,+BAAO;AACrB,UAAI,OAAO,UAAU,UAAU;AAC3B,aAAK,IAAI,KAAK,2CAA2C,KAAK,EAAE;AAAA,MACpE,OAAO;AAEH,aAAK,SAAS,KAAK;AAAA,MACvB;AAAA,IACJ;AACA,QAAI,OAAO,GAAG,KAAK,SAAS,wBAAwB,KAAK,SAAS;AAC9D,WAAK,IAAI,KAAK,+BAA+B,EAAE,MAAM,KAAK,UAAU,KAAK,CAAC,EAAE;AAC5E,YAAM,QAAQ,+BAAO;AACrB,UAAI,OAAO,UAAU,WAAW;AAC5B,aAAK,IAAI,KAAK,8CAA8C,KAAK,EAAE;AAAA,MACvE,OAAO;AACH,aAAK,aAAa,KAAK;AAAA,MAC3B;AAAA,IACJ;AACA,QAAI,OAAO,GAAG,KAAK,SAAS,2BAA2B,KAAK,SAAS;AACjE,WAAK,IAAI,KAAK,+BAA+B,EAAE,MAAM,KAAK,UAAU,KAAK,CAAC,EAAE;AAC5E,YAAM,QAAQ,+BAAO;AACrB,UAAI,OAAO,UAAU,WAAW;AAC5B,aAAK,IAAI,KAAK,8CAA8C,KAAK,EAAE;AAAA,MACvE,OAAO;AACH,aAAK,aAAa;AAAA,MACtB;AAAA,IACJ;AAAA,EAUJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,YAAY,OAAO;AACpG,OAAO;AAEH,GAAC,MAAM,IAAI,YAAY,GAAG;AAC9B;",
  "names": ["fs", "pfs"]
}
