{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.3\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport fs, { promises as pfs } from 'fs';\nimport { LoginResultResponse, SolixApi } from './api';\nimport { sleep } from './utils';\n\n// Load your modules here, e.g.:\n\nclass Ankersolix2 extends utils.Adapter {\n    private storeData: string = '';\n    private sleepInterval: number | undefined;\n    private loginData: LoginResultResponse | null;\n    private api: any;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'ankersolix2',\n        });\n\n        this.storeData = utils.getAbsoluteInstanceDataDir(this) + '/session.data';\n        this.loginData = null;\n\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        if (!this.config.Username || !this.config.Password) {\n            this.log.error(\n                `User name and/or user password empty - please check instance configuration of ${this.namespace}`,\n            );\n            return;\n        }\n\n        if (!this.config.POLL_INTERVAL || this.config.POLL_INTERVAL < 10) {\n            this.log.error(\n                `The poll intervall must be greater than 10 - please check instance configuration of ${this.namespace}`,\n            );\n            return;\n        }\n\n        try {\n            // create directory to store fetch data\n            if (!fs.existsSync(utils.getAbsoluteInstanceDataDir(this))) {\n                fs.mkdirSync(utils.getAbsoluteInstanceDataDir(this));\n                this.log.debug('Folder created: ' + this.storeData);\n                sleep(2000);\n            }\n        } catch (err) {\n            this.log.error(\n                'Could not create storage directory (' + utils.getAbsoluteInstanceDataDir(this) + '): ' + err,\n            );\n            return;\n        }\n\n        this.api = new SolixApi({\n            username: this.config.Username,\n            password: this.config.Password,\n            country: this.config.COUNTRY,\n            log: this.log,\n        });\n\n        this.refreshDate();\n    }\n\n    async loginAPI(): Promise<LoginResultResponse | null> {\n        let login = await this.restoreLoginData();\n\n        if (!this.isLoginValid(login)) {\n            this.log.debug('loginAPI: token expires');\n            login = null;\n        }\n\n        if (login == null) {\n            try {\n                const loginResponse = await this.api.login();\n                login = loginResponse.data ?? null;\n\n                if (login && loginResponse.code == 0) {\n                    this.log.debug('LoginRsponseCode: ' + loginResponse.code);\n\n                    await this.storeLoginData(login);\n                }\n            } catch (error) {\n                this.log.error('loginAPI: ' + (error as any).message);\n                const status = (error as any).status;\n                if (!(status >= 200 && status < 300 && status != 401)) {\n                    this.log.error('Cant login, maybe Servererror or no internet connection lost. Please wait 5min.');\n                    //fs.unlinkSync(this.storeData);\n                    const sleepInterval = 300 * 1000;\n                    await sleep(sleepInterval);\n                } else if (status == 401) {\n                    if (fs.existsSync(this.storeData)) {\n                        fs.unlinkSync(this.storeData);\n                    }\n                    this.terminate('Credentials are wrong, please check and restart', status);\n                }\n\n                return null;\n            }\n        } else {\n            this.log.debug('Using auth data from savefile');\n        }\n\n        return login;\n    }\n\n    async storeLoginData(data: LoginResultResponse): Promise<void> {\n        this.log.debug('Write Data to File: ' + this.storeData);\n        await pfs.writeFile(this.storeData, JSON.stringify(data), 'utf-8');\n    }\n\n    async restoreLoginData(): Promise<LoginResultResponse | null> {\n        try {\n            this.log.debug('Try to restore data from File: ' + this.storeData);\n            const data = await pfs.readFile(this.storeData, 'utf8');\n            return JSON.parse(data);\n        } catch (err) {\n            if ((err as any).code === 'ENOENT') {\n                this.log.error('RestoreLoginData: ' + (err as any).message);\n                return null;\n            } else {\n                this.log.error('RestoreLoginData: ' + (err as any).message);\n                return null;\n            }\n        }\n    }\n\n    async refreshDate(): Promise<void> {\n        const start = new Date().getTime();\n        this.loginData = await this.loginAPI();\n\n        //this.log.debug('loginData: ' + JSON.stringify(this.loginData));\n\n        if (this.loginData) {\n            await this.fetchAndPublish();\n\n            const end = new Date().getTime() - start;\n            this.sleepInterval = this.config.POLL_INTERVAL * 1000 - end;\n            this.log.debug(`Sleeping for ${this.sleepInterval}ms...`);\n            await sleep(this.sleepInterval);\n\n            this.refreshDate();\n        }\n    }\n\n    async fetchAndPublish(): Promise<void> {\n        this.log.debug('fetchAndPublish()');\n\n        try {\n            const loggedInApi = await this.api.withLogin(this.loginData);\n            const siteHomepage = await loggedInApi.siteHomepage();\n\n            if (siteHomepage.code == 0) {\n                let sites;\n                if (siteHomepage.data.site_list.length === 0) {\n                    // Fallback for Shared Accounts\n                    sites = (await loggedInApi.getSiteList()).data.site_list;\n                } else {\n                    sites = siteHomepage.data.site_list;\n                }\n\n                for (const site of sites) {\n                    const scenInfo = await loggedInApi.scenInfo(site.site_id);\n\n                    const message = JSON.stringify(scenInfo.data);\n                    const jsonparse = JSON.parse(message);\n\n                    //this.log.debug('JSON: ' + message);\n\n                    this.CreateOrUpdate(site.site_id, jsonparse.home_info.home_name, 'device');\n                    this.CreateOrUpdate(\n                        site.site_id + '.EXTRA.RAW_JSON',\n                        'RAW_JSON',\n                        'state',\n                        'string',\n                        'value',\n                        false,\n                        'undefined',\n                    );\n\n                    await this.setState(site.site_id + '.EXTRA.RAW_JSON', { val: message, ack: true });\n                    /*\n                    this.log.warn('SITE_ID: ' + site.site_id);\n                    const schedule = await loggedInApi.getSiteDeviceParam(ParamType.LoadConfiguration, site.site_id);\n                    const m_schedule = JSON.stringify(schedule);\n                    this.CreateOrUpdate(\n                        site.site_id + '.EXTRA.Schedule_JSON',\n                        'Schedule_JSON',\n                        'state',\n                        'string',\n                        'value',\n                        false,\n                        'undefined',\n                    );\n                    await this.setState(site.site_id + '.EXTRA.Schedule_JSON', { val: m_schedule, ack: true });\n                     */\n                    Object.entries(jsonparse).forEach((entries) => {\n                        const [id, value] = entries;\n\n                        const type = this.whatIsIt(value);\n\n                        const key = site.site_id + '.' + id;\n\n                        if (type === 'object') {\n                            this.isObject(key, value);\n                        } else if (type === 'array') {\n                            const array = JSON.parse(JSON.stringify(value));\n                            let i = 0;\n                            array.forEach((elem: any, item: any) => {\n                                if (this.whatIsIt(array[item]) === 'object') {\n                                    this.isObject(key + '.' + i, array[item]);\n                                } else if (this.whatIsIt(array[item]) === 'string') {\n                                    this.isString(key + '.' + i, array[item]);\n                                }\n                                i++;\n                            });\n                        } else {\n                            this.isString(key, value);\n                        }\n                    });\n\n                    //fs.writeFileSync(utils.getAbsoluteInstanceDataDir(this) + '/scenInfo.json', message, 'utf8');\n                }\n                this.log.debug('Published.');\n            } else {\n                this.log.error('loggedInApi Errorcode: ' + siteHomepage.code);\n            }\n        } catch (error) {\n            this.log.warn('Failed fetching or publishing printer data ' + error);\n\n            const status = (error as any).status;\n\n            if (!(status >= 200 && status < 300)) {\n                this.log.error('Something went wrong, Servererror or Internetconnection lost. Please wait 5min.');\n\n                const sleepInterval = 300 * 1000;\n                await sleep(sleepInterval);\n                this.refreshDate();\n            }\n            //this.log.error('Clear session.data, please wait');\n        }\n    }\n\n    whatIsIt(obj: any): 'boolean' | 'number' | 'string' | 'array' | 'object' | 'null' | 'undefined' | undefined {\n        if (obj === null) {\n            return 'null';\n        }\n        if (obj === undefined) {\n            return 'undefined';\n        }\n        if (Array.isArray(obj)) {\n            return 'array';\n        }\n        if (typeof obj === 'string') {\n            return 'string';\n        }\n        if (typeof obj === 'boolean') {\n            return 'boolean';\n        }\n        if (typeof obj === 'number') {\n            return 'number';\n        }\n        if (obj != null && typeof obj === 'object') {\n            return 'object';\n        }\n    }\n\n    isArray(key: string, value: any): void {\n        const array = JSON.parse(JSON.stringify(value));\n        array.forEach(async (elem: any, item: any) => {\n            const type = this.whatIsIt(array[item]);\n\n            if (type === 'object') {\n                this.isObject(key, array[item]);\n            } else if (type === 'string') {\n                this.isString(key, array[item]);\n            }\n        });\n    }\n\n    isObject(key: string, value: any): void {\n        const name = key.split('.').pop()?.replaceAll('_', ' ');\n\n        this.CreateOrUpdate(key, name, 'folder');\n        Object.entries(value).forEach((subentries) => {\n            const [objkey, objvalue] = subentries;\n            const type = this.whatIsIt(objvalue);\n            if (type === 'array') {\n                this.isArray(key + '.' + objkey, objvalue);\n            } else if (type === 'object') {\n                this.isObject(key + '.' + objkey, objvalue);\n            } else {\n                this.isString(key + '.' + objkey, objvalue);\n            }\n        });\n    }\n\n    async isString(key: string, value: any): Promise<void> {\n        let parmType: ioBroker.CommonType = 'string';\n        let parmRole: string = 'value';\n        let parmUnit = undefined;\n\n        const valType = this.whatIsIt(value);\n\n        if (valType === 'boolean') {\n            parmType = 'boolean';\n        }\n        if (valType === 'number') {\n            parmType = 'number';\n        }\n\n        if (key.includes('time') && !key.includes('backup_info')) {\n            parmType = 'string';\n            parmRole = 'value.time';\n\n            if (key.includes('create')) {\n                value = new Date(value * 1000).toUTCString();\n            } else if (key.includes('update')) {\n                //when Update_time not set in JSON, set it to actual time\n                value = new Date().getTime().toString();\n            }\n        }\n\n        if (key.includes('_power') && !key.includes('display') && !key.includes('battery')) {\n            parmType = 'number';\n            value = +value;\n            parmUnit = 'W';\n        }\n\n        if (key.includes('battery_power')) {\n            //Battery_power Level in %\n            parmRole = 'value.fill';\n            parmUnit = '%';\n            parmType = 'number';\n\n            if (key.includes('total_battery_power')) {\n                value = +value * 100;\n            } else {\n                value = +value;\n            }\n        }\n\n        if (key.includes('unit')) {\n            switch (value) {\n                case 'kWh':\n                case 'W':\n                    parmRole = 'value.energy';\n                    break;\n            }\n        }\n\n        const name = key.split('.').pop()?.replaceAll('_', ' ');\n\n        await this.CreateOrUpdate(key, name, 'state', parmType, parmRole, false, parmUnit);\n        await this.setState(key, { val: value, ack: true });\n    }\n\n    async CreateOrUpdate(\n        path: string,\n        name: string | undefined = 'Error',\n        type: 'state' | 'device' | 'folder' | 'channel',\n        commontype: ioBroker.CommonType | undefined = undefined,\n        role: string | undefined = undefined,\n        writable: boolean | undefined = undefined,\n        unit: string | undefined = undefined,\n        min: number | undefined = undefined,\n        max: number | undefined = undefined,\n        step: number | undefined = undefined,\n    ): Promise<void> {\n        const obj = await this.getObjectAsync(path);\n        if (obj == null) {\n            let newObj: any = null;\n            if (type === 'state') {\n                //this.log.debug(path + ' doesnt exist => create');\n                newObj = {\n                    type: type,\n                    common: {\n                        name: name,\n                        type: commontype,\n                        role: role,\n                        read: true,\n                        write: writable,\n                        unit: unit,\n                        min: min,\n                        max: max,\n                        step: step,\n                    },\n                    native: {},\n                };\n            } else {\n                newObj = {\n                    type: type,\n                    common: { name: name },\n                    native: {},\n                };\n            }\n            //this.log.debug(path + ' doesnt exist => create');\n            await this.setObjectAsync(path, newObj);\n        } else {\n            let changed: boolean = false;\n            if (type === 'state') {\n                if (obj.common.name != name) {\n                    obj.common.name = name;\n                    changed = true;\n                }\n                if (obj.common.type != commontype) {\n                    obj.common.type = commontype;\n                    changed = true;\n                }\n                if (obj.common.role != role) {\n                    obj.common.role = role;\n                    changed = true;\n                }\n                if (obj.common.read != true) {\n                    obj.common.read = true;\n                    changed = true;\n                }\n                if (obj.common.write != writable) {\n                    obj.common.write = writable;\n                    changed = true;\n                }\n                if (obj.common.unit != unit) {\n                    obj.common.unit = unit;\n                    changed = true;\n                }\n                if (obj.common.min != min) {\n                    obj.common.min = min;\n                    changed = true;\n                }\n                if (obj.common.max != max) {\n                    obj.common.max = max;\n                    changed = true;\n                }\n                if (obj.common.step != step) {\n                    obj.common.step = step;\n                    changed = true;\n                }\n            } else {\n                if (obj.common.name != name) {\n                    obj.common.name = name;\n                    changed = true;\n                }\n                if (obj.common.type != type) {\n                    obj.common.type = type;\n                    changed = true;\n                }\n            }\n            if (changed) {\n                //this.log.debug(path + ' => has been updated');\n                await this.setObjectAsync(path, obj);\n            }\n        }\n    }\n\n    getJSON(value: string): Promise<void> {\n        return JSON.parse(JSON.stringify(value));\n    }\n\n    isLoginValid(loginData: LoginResultResponse | null, now: Date = new Date()): boolean {\n        if (loginData != null) {\n            return new Date(loginData.token_expires_at * 1000).getTime() > now.getTime();\n        }\n        return false;\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            clearTimeout(this.sleepInterval);\n\n            callback();\n        } catch (e) {\n            this.log.error('onUnload: ' + e);\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Ankersolix2(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Ankersolix2())();\n}\n"],
  "mappings": "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",
  "names": ["fs", "pfs"]
}
