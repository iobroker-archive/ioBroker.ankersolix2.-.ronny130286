{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.3\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport fs, { promises as pfs } from 'fs';\nimport { type LoginResultResponse, SolixApi } from './api';\n\n// Load your modules here, e.g.:\n\nclass Ankersolix2 extends utils.Adapter {\n    private storeData: string = '';\n    private refreshTimeout: any;\n    private refreshAnalysisTimeout: any;\n    private loginData: LoginResultResponse | null;\n    private api: any;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'ankersolix2',\n        });\n\n        this.storeData = `${utils.getAbsoluteInstanceDataDir(this)}/session.data`;\n        this.loginData = null;\n        this.refreshTimeout = null;\n        this.refreshAnalysisTimeout = null;\n        this.api = null;\n        this.on('ready', this.onReady.bind(this));\n        //this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        if (!this.config.Username || !this.config.Password) {\n            this.log.error(\n                `User name and/or user password empty - please check instance configuration of ${this.namespace}`,\n            );\n            return;\n        }\n\n        if (!this.config.POLL_INTERVAL || (this.config.POLL_INTERVAL < 10 && this.config.POLL_INTERVAL > 3600)) {\n            this.log.error(\n                `The poll intervall must be between 10 and 3600 secounds - please check instance configuration of ${this.namespace}`,\n            );\n            return;\n        }\n\n        try {\n            // create directory to store fetch data\n            if (!fs.existsSync(utils.getAbsoluteInstanceDataDir(this))) {\n                fs.mkdirSync(utils.getAbsoluteInstanceDataDir(this));\n                this.log.debug(`Folder created: ${this.storeData}`);\n            }\n        } catch (err: any) {\n            this.log.error(`Could not create storage directory (${utils.getAbsoluteInstanceDataDir(this)}): ${err}`);\n            return;\n        }\n        this.loginData = await this.loginAPI();\n\n        this.refreshDate();\n        this.refreshAnalysis();\n    }\n\n    async loginAPI(): Promise<LoginResultResponse | null> {\n        this.api = new SolixApi({\n            username: this.config.Username,\n            password: this.config.Password,\n            country: this.config.COUNTRY,\n            log: this.log,\n        });\n\n        let login = await this.restoreLoginData();\n        if (login) {\n            //check if login token not expired\n            if (!this.isLoginValid(login)) {\n                this.log.debug('loginAPI: token expired');\n                login = null;\n            }\n            //check if username in stored file the same in config\n            if (login?.email != this.config.Username) {\n                this.log.debug('loginAPI: username are different');\n                login = null;\n            }\n        }\n\n        if (login == null) {\n            try {\n                const loginResponse = await this.api.login();\n                login = loginResponse.data ?? null;\n                this.log.debug(`LoginResponseCode: ${loginResponse.code} => ${loginResponse.msg}`);\n                if (login && loginResponse.code == 0) {\n                    this.log.debug(`Write data to file`);\n                    await pfs.writeFile(this.storeData, JSON.stringify(login), 'utf-8');\n                }\n            } catch (error: any) {\n                this.log.error(`loginAPI: ${error.message}`);\n                const status = error.status;\n                if (status == 401) {\n                    if (fs.existsSync(this.storeData)) {\n                        fs.unlinkSync(this.storeData);\n                    }\n                    this.terminate('Credentials are wrong, please check and restart', status);\n                }\n\n                return null;\n            }\n        } else {\n            this.log.debug('Using auth data from savefile');\n        }\n\n        return login;\n    }\n\n    async restoreLoginData(): Promise<LoginResultResponse | null> {\n        try {\n            this.log.debug('Try to restore data from File');\n            const data = await pfs.readFile(this.storeData, 'utf8');\n            return JSON.parse(data);\n        } catch (err: any) {\n            if (err.code === 'ENOENT') {\n                this.log.debug(`RestoreLoginData: ${err.message}`);\n                return null;\n            }\n            this.log.debug(`RestoreLoginData: ${err.message}`);\n            return null;\n        }\n    }\n\n    async refreshDate(): Promise<void> {\n        let refresh = this.config.POLL_INTERVAL;\n        try {\n            if (!this.isLoginValid(this.loginData) || this.loginData?.email != this.config.Username) {\n                this.loginData = await this.loginAPI();\n            }\n\n            if (this.loginData) {\n                await this.fetchAndPublish();\n            }\n        } catch (err: any) {\n            this.log.error(`Failed fetching or publishing printer data, Error: ${err}`);\n            this.log.debug(`Error Object: ${JSON.stringify(err)}`);\n            refresh = this.config.POLL_INTERVAL * 5;\n        } finally {\n            if (this.refreshTimeout) {\n                this.log.debug(`refreshTimeout clear: ${this.refreshTimeout.id}`);\n                this.clearTimeout(this.refreshTimeout);\n            }\n\n            this.refreshTimeout = this.setTimeout(() => {\n                this.refreshTimeout = null;\n                this.refreshDate();\n            }, refresh * 1000);\n            this.log.debug(`Sleeping for ${refresh * 1000}ms... TimerId ${this.refreshTimeout}`);\n        }\n    }\n\n    async refreshAnalysis(): Promise<void> {\n        try {\n            if (!this.isLoginValid(this.loginData) || this.loginData?.email != this.config.Username) {\n                this.loginData = await this.loginAPI();\n            }\n            if (this.loginData) {\n                await this.fetchAndPublishAnalysis();\n            }\n        } catch (err: any) {\n            this.log.error(`Failed fetching or publishing analysisdata: ${err}`);\n            this.log.debug(`Error Object: ${JSON.stringify(err)}`);\n        } finally {\n            if (this.refreshAnalysisTimeout) {\n                this.log.debug(`refreshAnalysisTimeout clear: ${this.refreshAnalysisTimeout.id}`);\n                this.clearTimeout(this.refreshAnalysisTimeout);\n            }\n\n            this.refreshAnalysisTimeout = this.setTimeout(() => {\n                this.refreshAnalysisTimeout = null;\n                this.refreshAnalysis();\n            }, 600 * 1000);\n            this.log.debug(`Analysis Sleeping for ${600 * 1000}ms... TimerId ${this.refreshAnalysisTimeout}`);\n        }\n    }\n\n    async fetchAndPublish(): Promise<void> {\n        const loggedInApi = await this.api.withLogin(this.loginData);\n        const siteHomepage = await loggedInApi.siteHomepage();\n\n        let sites;\n        if (siteHomepage.data.site_list.length === 0) {\n            // Fallback for Shared Accounts\n            sites = (await loggedInApi.getSiteList()).data.site_list;\n        } else {\n            sites = siteHomepage.data.site_list;\n        }\n\n        for (const site of sites) {\n            const scenInfo = await loggedInApi.scenInfo(site.site_id);\n\n            const message = JSON.stringify(scenInfo.data);\n            const jsonparse = JSON.parse(message);\n\n            this.CreateOrUpdate(site.site_id, jsonparse.home_info.home_name, 'device');\n            this.CreateOrUpdate(\n                `${site.site_id}.EXTRA.RAW_JSON`,\n                'RAW_JSON',\n                'state',\n                'string',\n                'value',\n                false,\n                'undefined',\n            );\n            await this.setState(`${site.site_id}.EXTRA.RAW_JSON`, { val: message, ack: true });\n\n            Object.entries(jsonparse).forEach(entries => {\n                const [id, value] = entries;\n\n                const type = this.whatIsIt(value);\n\n                const key = `${site.site_id}.${id}`;\n\n                if (type === 'object') {\n                    this.isObject(key, value);\n                } else if (type === 'array') {\n                    const array = JSON.parse(JSON.stringify(value));\n                    let i = 0;\n                    array.forEach((elem: any, item: any) => {\n                        if (this.whatIsIt(array[item]) === 'object') {\n                            this.isObject(`${key}.${i}`, array[item]);\n                        } else if (this.whatIsIt(array[item]) === 'string') {\n                            this.isString(`${key}.${i}`, array[item]);\n                        }\n                        i++;\n                    });\n                } else {\n                    this.isString(key, value);\n                }\n            });\n        }\n        this.log.debug('Published Data.');\n    }\n\n    async fetchAndPublishAnalysis(): Promise<void> {\n        const loggedInApi = await this.api.withLogin(this.loginData);\n        const siteHomepage = await loggedInApi.siteHomepage();\n\n        let sites;\n        if (siteHomepage.data.site_list.length === 0) {\n            // Fallback for Shared Accounts\n            sites = (await loggedInApi.getSiteList()).data.site_list;\n        } else {\n            sites = siteHomepage.data.site_list;\n        }\n\n        for (const site of sites) {\n            const ranges = ['day', 'week'];\n\n            for (const range of ranges) {\n                this.CreateOrUpdate(\n                    `${site.site_id}.EXTRA.ENERGY_${range.toUpperCase()}`,\n                    'ENERGY_JSON',\n                    'state',\n                    'string',\n                    'value',\n                    false,\n                    'undefined',\n                );\n\n                let energyInfo;\n                const date = new Date();\n                if (range == 'year') {\n                    const startDate = new Date(new Date().getFullYear(), 0, 1);\n                    const endDate = new Date(new Date().getFullYear(), 11, 31);\n\n                    energyInfo = await loggedInApi.energyAnalysis(site.site_id, '', range, startDate, endDate);\n                } else if (range == 'week') {\n                    const start = date.getDate() - date.getDay() + (date.getDay() === 0 ? -6 : 1);\n                    const end = start + 6;\n\n                    const startDate = new Date(date.setDate(start));\n                    const endDate = new Date(date.setDate(end));\n                    energyInfo = await loggedInApi.energyAnalysis(site.site_id, '', range, startDate, endDate);\n                } else {\n                    energyInfo = await loggedInApi.energyAnalysis(site.site_id, '', 'week', new Date(), new Date());\n                }\n                const energy_message = JSON.stringify(energyInfo.data);\n                await this.setState(`${site.site_id}.EXTRA.ENERGY_${range.toUpperCase()}`, {\n                    val: energy_message,\n                    ack: true,\n                });\n\n                Object.entries(JSON.parse(energy_message)).forEach(entries => {\n                    const [id, value] = entries;\n\n                    const type = this.whatIsIt(value);\n\n                    const key = `${site.site_id}.eneryanalysis.${range}.${id}`;\n\n                    if (type === 'object') {\n                        this.isObject(key, value);\n                    } else if (type === 'array') {\n                        const array = JSON.parse(JSON.stringify(value));\n                        let i = 0;\n                        array.forEach((elem: any, item: any) => {\n                            if (this.whatIsIt(array[item]) === 'object') {\n                                this.isObject(`${key}.${i}`, array[item]);\n                            } else if (this.whatIsIt(array[item]) === 'string') {\n                                this.isString(`${key}.${i}`, array[item]);\n                            }\n                            i++;\n                        });\n                    } else {\n                        this.isString(key, value);\n                    }\n                });\n            }\n        }\n        this.log.debug('Published Analysis Data.');\n    }\n\n    whatIsIt(obj: any): 'boolean' | 'number' | 'string' | 'array' | 'object' | 'null' | 'undefined' | undefined {\n        if (obj === null) {\n            return 'null';\n        }\n        if (obj === undefined) {\n            return 'undefined';\n        }\n        if (Array.isArray(obj)) {\n            return 'array';\n        }\n        if (typeof obj === 'string') {\n            return 'string';\n        }\n        if (typeof obj === 'boolean') {\n            return 'boolean';\n        }\n        if (typeof obj === 'number') {\n            return 'number';\n        }\n        if (obj != null && typeof obj === 'object') {\n            return 'object';\n        }\n    }\n\n    isArray(key: string, value: any): void {\n        const array = JSON.parse(JSON.stringify(value));\n        array.forEach(async (elem: any, item: any) => {\n            const type = this.whatIsIt(array[item]);\n\n            if (type === 'object') {\n                this.isObject(key, array[item]);\n            } else if (type === 'string') {\n                this.isString(key, array[item]);\n            }\n        });\n    }\n\n    isObject(key: string, value: any): void {\n        const name = key.split('.').pop();\n\n        this.CreateOrUpdate(key, name, 'folder');\n        Object.entries(value).forEach(subentries => {\n            const [objkey, objvalue] = subentries;\n            const type = this.whatIsIt(objvalue);\n            if (type === 'array') {\n                this.isArray(`${key}.${objkey}`, objvalue);\n            } else if (type === 'object') {\n                this.isObject(`${key}.${objkey}`, objvalue);\n            } else {\n                this.isString(`${key}.${objkey}`, objvalue);\n            }\n        });\n    }\n\n    async isString(key: string, value: any): Promise<void> {\n        let parmType: ioBroker.CommonType = 'string';\n        let parmRole = 'value';\n        let parmUnit = undefined;\n\n        const valType = this.whatIsIt(value);\n\n        if (valType === 'boolean') {\n            parmType = 'boolean';\n        }\n        if (valType === 'number') {\n            parmType = 'number';\n        }\n\n        if (key.includes('time') && !key.includes('backup_info')) {\n            parmType = 'string';\n            parmRole = 'value.time';\n\n            if (key.includes('create')) {\n                value = new Date(value * 1000).toUTCString();\n            } else if (key.includes('update')) {\n                //when Update_time not set in JSON, set it to actual time\n                value = new Date().getTime().toString();\n            }\n        }\n\n        if (key.includes('_power') && !key.includes('display') && !key.includes('battery')) {\n            parmType = 'number';\n            value = +value;\n            parmUnit = 'W';\n        }\n\n        if (key.includes('battery_power')) {\n            //Battery_power Level in %\n            parmRole = 'value.fill';\n            parmUnit = '%';\n            parmType = 'number';\n\n            if (key.includes('total_battery_power')) {\n                value = +value * 100;\n            } else {\n                value = +value;\n            }\n        }\n\n        if (key.includes('unit')) {\n            switch (value) {\n                case 'kWh':\n                case 'W':\n                    parmRole = 'value.energy';\n                    break;\n            }\n        }\n\n        const name = key.split('.').pop();\n\n        await this.CreateOrUpdate(key, name, 'state', parmType, parmRole, false, parmUnit);\n        await this.setState(key, { val: value, ack: true });\n    }\n\n    async CreateOrUpdate(\n        path: string,\n        name: string | undefined = 'Error',\n        type: 'state' | 'device' | 'folder' | 'channel',\n        commontype: ioBroker.CommonType | undefined = undefined,\n        role: string | undefined = undefined,\n        writable: boolean | undefined = undefined,\n        unit: string | undefined = undefined,\n        min: number | undefined = undefined,\n        max: number | undefined = undefined,\n        step: number | undefined = undefined,\n    ): Promise<void> {\n        let newObj: any = null;\n\n        if (type === 'state') {\n            newObj = {\n                type: type,\n                common: {\n                    name: this.name2id(name),\n                    type: commontype,\n                    role: role,\n                    read: true,\n                    write: writable,\n                    unit: unit,\n                    min: min,\n                    max: max,\n                    step: step,\n                },\n                native: {},\n            };\n        } else {\n            newObj = {\n                type: type,\n                common: { name: name },\n                native: {},\n            };\n        }\n        await this.extendObject(this.name2id(path), newObj);\n    }\n\n    isLoginValid(loginData: LoginResultResponse | null, now: Date = new Date()): boolean {\n        if (loginData != null) {\n            return new Date(loginData.token_expires_at * 1000).getTime() > now.getTime();\n        }\n        return false;\n    }\n\n    name2id(pName: string): string {\n        return (pName || '').replace(this.FORBIDDEN_CHARS, '_');\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n            if (this.refreshTimeout) {\n                this.log.debug('refreshTimeout: Unload');\n                clearTimeout(this.refreshTimeout);\n            }\n            if (this.refreshAnalysisTimeout) {\n                this.log.debug('refreshAnalysisTimeout: Unload');\n                clearTimeout(this.refreshAnalysisTimeout);\n            }\n\n            callback();\n        } catch (e: any) {\n            this.log.error(`onUnload: ${e}`);\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    //private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n    //    if (state) {\n    //        // The state was changed\n    //        this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n    //    } else {\n    //        // The state was deleted\n    //        this.log.info(`state ${id} deleted`);\n    //    }\n    // }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Ankersolix2(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Ankersolix2())();\n}\n"],
  "mappings": "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",
  "names": ["fs", "pfs"]
}
