{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.3\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport fs from 'fs';\nimport { LoginResultResponse, SolixApi } from './api.js';\nimport { FilePersistence, Persistence } from './persistence.js';\nimport { sleep } from './utils.js';\n\nfunction isLoginValid(loginData: LoginResultResponse, now: Date = new Date()) {\n    return new Date(loginData.token_expires_at * 1000).getTime() > now.getTime();\n}\n// Load your modules here, e.g.:\n\nclass Ankersolix2 extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'ankersolix2',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        //this.log.info('config option1: ' + this.config.S2M_User);\n        //this.log.info('config option2: ' + this.config.S2M_Pass);\n\n        /*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n        await this.setObjectNotExistsAsync('testVariable', {\n            type: 'state',\n            common: {\n                name: 'testVariable',\n                type: 'boolean',\n                role: 'indicator',\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n\n        if (!this.config.S2M_User || !this.config.S2M_Pass) {\n            this.log.error(\n                `User name and/or user password empty - please check instance configuration of ${this.namespace}`,\n            );\n            return;\n        }\n\n        if (!this.config.S2M_POLL_INTERVAL || this.config.S2M_POLL_INTERVAL < 30) {\n            this.log.error(\n                `The poll intervall must be greater than 30 - please check instance configuration of ${this.namespace}`,\n            );\n            return;\n        }\n\n        const storeDir = utils.getAbsoluteInstanceDataDir(this);\n        try {\n            // create directory\n            if (!fs.existsSync(storeDir)) {\n                fs.mkdirSync(storeDir);\n                this.log.info('Folder created: ' + storeDir);\n            }\n        } catch (err) {\n            this.log.error('Could not create storage directory (' + storeDir + '): ' + err);\n            return;\n        }\n\n        this.refreshDate();\n    }\n\n    async refreshDate(): Promise<void> {\n        const start = new Date().getTime();\n        try {\n            await this.fetchAndPublish();\n        } catch (e) {\n            this.log.warn('Failed fetching or publishing printer data' + e);\n        } finally {\n            const end = new Date().getTime() - start;\n            const sleepInterval = this.config.S2M_POLL_INTERVAL * 1000 - end;\n            this.log.info(`Sleeping for ${sleepInterval}ms...`);\n            await sleep(sleepInterval);\n\n            this.refreshDate();\n        }\n    }\n\n    async fetchAndPublish(): Promise<void> {\n        this.log.info('Fetching data');\n\n        const api = new SolixApi({\n            username: this.config.S2M_User,\n            password: this.config.S2M_Pass,\n            country: this.config.S2M_COUNTRY,\n            log: this.log,\n        });\n\n        const storeDir = utils.getAbsoluteInstanceDataDir(this);\n\n        const persistence: Persistence<LoginResultResponse> = new FilePersistence(storeDir + '/session.data', this.log);\n\n        let loginData = await persistence.retrieve();\n        if (loginData == null || !isLoginValid(loginData)) {\n            const loginResponse = await api.login();\n            loginData = loginResponse.data ?? null;\n            if (loginData) {\n                await persistence.store(loginData);\n            } else {\n                this.log.error(`Could not log in: ${loginResponse.msg} (${loginResponse.code})`);\n            }\n        } else {\n            this.log.info('Using cached auth data');\n        }\n\n        if (loginData) {\n            const loggedInApi = api.withLogin(loginData);\n            const siteHomepage = await loggedInApi.siteHomepage();\n            //let topic = `${config.mqttTopic}/site_homepage`;\n            //await publisher.publish(topic, siteHomepage.data);\n\n            this.log.debug('siteHomepage Data: ' + JSON.stringify(siteHomepage.data.site_list));\n\n            let sites;\n            if (siteHomepage.data.site_list.length === 0) {\n                // Fallback for Shared Accounts\n                sites = (await loggedInApi.getSiteList()).data.site_list;\n            } else {\n                sites = siteHomepage.data.site_list;\n            }\n            for (const site of sites) {\n                const scenInfo = await loggedInApi.scenInfo(site.site_id);\n\n                const message = JSON.stringify(scenInfo.data);\n                const jsonparse = JSON.parse(message);\n\n                Object.entries(jsonparse).forEach((entries) => {\n                    const [key, value] = entries;\n\n                    const type = this.whatIsIt(value);\n\n                    if (type === 'object') {\n                        /*\n                        if (type === 'array') {\n                            this.isAnArray(value, key);\n                        } else if (type === 'object') {\n                            this.isAnObject(value, key);\n                        }*/\n                        this.isAnObject(value, key);\n                    } else if (type === 'array') {\n                        const array = JSON.parse(JSON.stringify(value));\n                        let i = 0;\n                        array.forEach((elem: any, item: any) => {\n                            if (this.whatIsIt(array[item]) === 'object') {\n                                this.isAnObject(array[item], key + '.' + i);\n                            } else if (this.whatIsIt(array[item]) === 'string') {\n                                this.isAnString(array[item], key + '.' + i);\n                            }\n                            i++;\n                        });\n                    } else {\n                        this.isAnString(value, key);\n                    }\n                });\n\n                fs.writeFileSync(utils.getAbsoluteInstanceDataDir(this) + '/scenInfo.json', message, 'utf8');\n            }\n            this.log.info('Published.');\n        } else {\n            this.log.error('Not logged in');\n        }\n    }\n\n    whatIsIt(obj: any): 'boolean' | 'number' | 'string' | 'array' | 'object' | 'null' | 'undefined' | undefined {\n        if (obj === null) {\n            return 'null';\n        }\n        if (obj === undefined) {\n            return 'undefined';\n        }\n        if (Array.isArray(obj)) {\n            return 'array';\n        }\n        if (typeof obj === 'string') {\n            return 'string';\n        }\n        if (typeof obj === 'boolean') {\n            return 'boolean';\n        }\n        if (typeof obj === 'number' || typeof obj === 'bigint') {\n            return 'number';\n        }\n        if (obj != null && typeof obj === 'object') {\n            return 'object';\n        }\n    }\n\n    isAnArray(value: any, arrayname: any): void {\n        const array = JSON.parse(JSON.stringify(value));\n        array.forEach(async (elem: any, item: any) => {\n            const type = this.whatIsIt(array[item]);\n\n            if (type === 'object') {\n                this.isAnObject(array[item], arrayname);\n            } else if (type === 'string') {\n                this.isAnString(array[item], arrayname);\n            }\n        });\n    }\n\n    isAnObject(value: any, subname: any): void {\n        Object.entries(value).forEach((subentries) => {\n            const [subkey, subvalue] = subentries;\n            const type = this.whatIsIt(subvalue);\n            if (type === 'array') {\n                this.isAnArray(subvalue, subname + '.' + subkey);\n            } else {\n                this.isAnString(subvalue, subname + '.' + subkey);\n            }\n        });\n    }\n\n    async isAnString(value: any, name: any): Promise<void> {\n        //console.log(name + ' = ' + value + ' type: ' + this.whatIsIt(value));\n        this.log.info('Name: ' + name + 'ValueTyp: ' + typeof value);\n        let typeNValue = typeof value;\n        let typeObj = 'string';\n        if (typeNValue === 'string') {\n            await this.setObjectNotExistsAsync(name, {\n                type: 'state',\n                common: {\n                    name: name,\n                    type: 'string',\n                    role: 'value',\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            }).catch((e) => {\n                this.log.error(`setObjectNotExists:${e}`);\n            });\n        } else if (typeNValue === 'boolean') {\n            await this.setObjectNotExistsAsync(name, {\n                type: 'state',\n                common: {\n                    name: name,\n                    type: 'boolean',\n                    role: 'value',\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            }).catch((e) => {\n                this.log.error(`setObjectNotExists:${e}`);\n            });\n        } else if (typeNValue === 'number') {\n            await this.setObjectNotExistsAsync(name, {\n                type: 'state',\n                common: {\n                    name: name,\n                    type: 'number',\n                    role: 'value',\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            }).catch((e) => {\n                this.log.error(`setObjectNotExists:${e}`);\n            });\n        }\n\n        this.setState(name, { val: value, ack: true });\n        /**/\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Ankersolix2(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Ankersolix2())();\n}\n"],
  "mappings": "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",
  "names": ["fs"]
}
