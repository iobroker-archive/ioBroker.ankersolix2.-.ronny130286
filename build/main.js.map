{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.3\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport fs from 'fs';\nimport { LoginResultResponse, SolixApi } from './api.js';\nimport { FilePersistence, Persistence } from './persistence.js';\nimport { sleep } from './utils.js';\n\n// Load your modules here, e.g.:\n\nclass Ankersolix2 extends utils.Adapter {\n    storeDir = utils.getAbsoluteInstanceDataDir(this);\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'ankersolix2',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        if (!this.config.Username || !this.config.Password) {\n            this.log.error(\n                `User name and/or user password empty - please check instance configuration of ${this.namespace}`,\n            );\n            return;\n        }\n\n        if (!this.config.POLL_INTERVAL || this.config.POLL_INTERVAL < 30) {\n            this.log.error(\n                `The poll intervall must be greater than 30 - please check instance configuration of ${this.namespace}`,\n            );\n            return;\n        }\n\n        try {\n            // create directory to store fetch data\n            if (!fs.existsSync(this.storeDir)) {\n                fs.mkdirSync(this.storeDir);\n                this.log.debug('Folder created: ' + this.storeDir);\n            }\n        } catch (err) {\n            this.log.error('Could not create storage directory (' + this.storeDir + '): ' + err);\n            return;\n        }\n\n        this.refreshDate();\n    }\n\n    async refreshDate(): Promise<void> {\n        const start = new Date().getTime();\n        try {\n            await this.fetchAndPublish();\n        } catch (e) {\n            //looking for session.data, delete if exist, so get a new token. Problem happen if use the same account in App\n            if (!fs.existsSync(this.storeDir + '/session.data')) {\n                fs.unlinkSync(this.storeDir + '/session.data');\n            }\n            this.log.warn('Failed fetching or publishing printer data' + e);\n        } finally {\n            const end = new Date().getTime() - start;\n            const sleepInterval = this.config.POLL_INTERVAL * 1000 - end;\n            this.log.debug(`Sleeping for ${sleepInterval}ms...`);\n            await sleep(sleepInterval);\n\n            this.refreshDate();\n        }\n    }\n\n    async fetchAndPublish(): Promise<void> {\n        this.log.debug('Fetching data');\n\n        const api = new SolixApi({\n            username: this.config.Username,\n            password: this.config.Password,\n            country: this.config.COUNTRY,\n            log: this.log,\n        });\n\n        const persistence: Persistence<LoginResultResponse> = new FilePersistence(\n            this.storeDir + '/session.data',\n            this.log,\n        );\n\n        let loginData = await persistence.retrieve();\n        if (loginData == null || !this.isLoginValid(loginData)) {\n            const loginResponse = await api.login();\n            loginData = loginResponse.data ?? null;\n            if (loginData) {\n                await persistence.store(loginData);\n            } else {\n                this.log.error(`Could not log in: ${loginResponse.msg} (${loginResponse.code})`);\n            }\n        } else {\n            this.log.debug('Using cached auth data');\n        }\n\n        if (loginData) {\n            const loggedInApi = api.withLogin(loginData);\n            const siteHomepage = await loggedInApi.siteHomepage();\n\n            this.log.debug('siteHomepage Data: ' + JSON.stringify(siteHomepage.data.site_list));\n\n            let sites;\n            if (siteHomepage.data.site_list.length === 0) {\n                // Fallback for Shared Accounts\n                sites = (await loggedInApi.getSiteList()).data.site_list;\n            } else {\n                sites = siteHomepage.data.site_list;\n            }\n\n            for (const site of sites) {\n                const scenInfo = await loggedInApi.scenInfo(site.site_id);\n\n                const message = JSON.stringify(scenInfo.data);\n                const jsonparse = JSON.parse(message);\n\n                this.CreateOrUpdateFolder(site.site_id, jsonparse.home_info.home_name, 'device');\n\n                Object.entries(jsonparse).forEach((entries) => {\n                    const [id, value] = entries;\n\n                    const type = this.whatIsIt(value);\n\n                    const key = site.site_id + '.' + id;\n\n                    if (type === 'object') {\n                        this.isObject(key, value);\n                    } else if (type === 'array') {\n                        const array = JSON.parse(JSON.stringify(value));\n                        let i = 0;\n                        array.forEach((elem: any, item: any) => {\n                            if (this.whatIsIt(array[item]) === 'object') {\n                                this.isObject(key + '.' + i, array[item]);\n                            } else if (this.whatIsIt(array[item]) === 'string') {\n                                this.isString(key + '.' + i, array[item]);\n                            }\n                            i++;\n                        });\n                    } else {\n                        this.isString(key, value);\n                    }\n                });\n\n                //fs.writeFileSync(utils.getAbsoluteInstanceDataDir(this) + '/scenInfo.json', message, 'utf8');\n            }\n            this.log.debug('Published.');\n        } else {\n            this.log.error('Not logged in');\n        }\n    }\n\n    whatIsIt(obj: any): 'boolean' | 'number' | 'string' | 'array' | 'object' | 'null' | 'undefined' | undefined {\n        if (obj === null) {\n            return 'null';\n        }\n        if (obj === undefined) {\n            return 'undefined';\n        }\n        if (Array.isArray(obj)) {\n            return 'array';\n        }\n        if (typeof obj === 'string') {\n            return 'string';\n        }\n        if (typeof obj === 'boolean') {\n            return 'boolean';\n        }\n        if (typeof obj === 'number') {\n            return 'number';\n        }\n        if (obj != null && typeof obj === 'object') {\n            return 'object';\n        }\n    }\n\n    isArray(key: string, value: any): void {\n        const array = JSON.parse(JSON.stringify(value));\n        array.forEach(async (elem: any, item: any) => {\n            const type = this.whatIsIt(array[item]);\n\n            if (type === 'object') {\n                this.isObject(key, array[item]);\n            } else if (type === 'string') {\n                this.isString(key, array[item]);\n            }\n        });\n    }\n\n    isObject(key: string, value: any): void {\n        const name = key.split('.').pop()?.replaceAll('_', ' ');\n        this.CreateOrUpdateFolder(key, name, 'folder');\n        Object.entries(value).forEach((subentries) => {\n            const [objkey, objvalue] = subentries;\n            const type = this.whatIsIt(objvalue);\n            if (type === 'array') {\n                this.isArray(key + '.' + objkey, objvalue);\n            } else {\n                this.isString(key + '.' + objkey, objvalue);\n            }\n        });\n    }\n\n    async isString(key: string, value: any): Promise<void> {\n        let parmType: ioBroker.CommonType = 'string';\n        let parmRole: string = 'value';\n        const valType = this.whatIsIt(value);\n\n        if (valType === 'boolean') {\n            parmType = 'boolean';\n        }\n        if (valType === 'number') {\n            parmType = 'number';\n        }\n        if (key.includes('time')) {\n            parmType = 'string';\n            parmRole = 'value.time';\n            if (valType === 'number') {\n                value = new Date(value * 1000).toUTCString();\n            }\n        }\n        if (key.includes('unit')) {\n            switch (value) {\n                case 'kWh':\n                    parmRole = 'value.energy';\n                    break;\n                case 'W':\n                    parmRole = 'value.energy';\n                    break;\n                default:\n                    break;\n            }\n        }\n        let parmUnit = undefined;\n        if (key.includes('_power') && !key.includes('display')) {\n            parmUnit = 'W';\n        }\n\n        const name = key.split('.').pop()?.replaceAll('_', ' ');\n\n        await this.CreateOrUpdateState(key, name, parmType, parmRole, false, parmUnit);\n        this.setState(key, { val: value, ack: true });\n    }\n\n    async CreateOrUpdateFolder(\n        path: string,\n        name: string | undefined = 'error',\n        type: 'folder' | 'device' | 'channel',\n    ): Promise<void> {\n        const obj = await this.getObjectAsync(path);\n        if (obj == null) {\n            this.log.debug(path + ' doesnt exist => create');\n            const newObj: ioBroker.SettableObject = {\n                type: type,\n                common: { name: name },\n                native: {},\n            };\n            await this.setObjectAsync(path, newObj);\n        } else {\n            this.log.debug(path + ' exist => looking for update');\n            let changed: boolean = false;\n            if (obj.common.name != name) {\n                obj.common.name = name;\n                changed = true;\n            }\n            if (obj.common.type != type) {\n                obj.common.type = type;\n                changed = true;\n            }\n            if (changed) {\n                this.log.debug(path + ' => has been updated');\n                await this.setObjectAsync(path, obj);\n            }\n        }\n    }\n\n    async CreateOrUpdateState(\n        path: string,\n        name: string | undefined = 'Error',\n        type: ioBroker.CommonType,\n        role: string,\n        writable: boolean,\n        unit: string | undefined = undefined,\n        min: number | undefined = undefined,\n        max: number | undefined = undefined,\n        step: number | undefined = undefined,\n    ): Promise<void> {\n        const obj = await this.getObjectAsync(path);\n        if (obj == null) {\n            this.log.debug(path + ' doesnt exist => create');\n            const newObj: ioBroker.SettableObject = {\n                type: 'state',\n                common: {\n                    name: name,\n                    type: type,\n                    role: role,\n                    read: true,\n                    write: writable,\n                    unit: unit,\n                    min: min,\n                    max: max,\n                    step: step,\n                },\n                native: {},\n            };\n            await this.setObjectAsync(path, newObj);\n        } else {\n            this.log.debug(path + ' exist => looking for update');\n            let changed: boolean = false;\n            if (obj.common == null) {\n                obj.common = {\n                    name: name,\n                    type: 'string',\n                    role: role,\n                    read: true,\n                    write: writable,\n                    unit: unit,\n                    min: min,\n                    max: max,\n                    step: step,\n                };\n                changed = true;\n            } else {\n                if (obj.common.name != name) {\n                    obj.common.name = name;\n                    changed = true;\n                }\n                if (obj.common.type != type) {\n                    obj.common.type = type;\n                    changed = true;\n                }\n                if (obj.common.role != role) {\n                    obj.common.role = role;\n                    changed = true;\n                }\n                if (obj.common.read != true) {\n                    obj.common.read = true;\n                    changed = true;\n                }\n                if (obj.common.write != writable) {\n                    obj.common.write = writable;\n                    changed = true;\n                }\n                if (obj.common.unit != unit) {\n                    obj.common.unit = unit;\n                    changed = true;\n                }\n                if (obj.common.min != min) {\n                    obj.common.min = min;\n                    changed = true;\n                }\n                if (obj.common.max != max) {\n                    obj.common.max = max;\n                    changed = true;\n                }\n                if (obj.common.step != step) {\n                    obj.common.step = step;\n                    changed = true;\n                }\n                if (changed) {\n                    this.log.debug(path + ' => has been updated');\n                    await this.setObjectAsync(path, obj);\n                }\n            }\n        }\n    }\n\n    getJSON(value: string): Promise<void> {\n        return JSON.parse(JSON.stringify(value));\n    }\n\n    isLoginValid(loginData: LoginResultResponse, now: Date = new Date()): boolean {\n        return new Date(loginData.token_expires_at * 1000).getTime() > now.getTime();\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            callback();\n        } catch (e) {\n            this.log.error('onUnload: ' + e);\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Ankersolix2(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Ankersolix2())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,gBAAe;AACf,iBAA8C;AAC9C,yBAA6C;AAC7C,mBAAsB;AAItB,MAAM,oBAAoB,MAAM,QAAQ;AAAA,EACpC,WAAW,MAAM,2BAA2B,IAAI;AAAA,EAEzC,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAyB;AAGnC,QAAI,CAAC,KAAK,OAAO,YAAY,CAAC,KAAK,OAAO,UAAU;AAChD,WAAK,IAAI;AAAA,QACL,iFAAiF,KAAK,SAAS;AAAA,MACnG;AACA;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,OAAO,iBAAiB,KAAK,OAAO,gBAAgB,IAAI;AAC9D,WAAK,IAAI;AAAA,QACL,uFAAuF,KAAK,SAAS;AAAA,MACzG;AACA;AAAA,IACJ;AAEA,QAAI;AAEA,UAAI,CAAC,UAAAA,QAAG,WAAW,KAAK,QAAQ,GAAG;AAC/B,kBAAAA,QAAG,UAAU,KAAK,QAAQ;AAC1B,aAAK,IAAI,MAAM,qBAAqB,KAAK,QAAQ;AAAA,MACrD;AAAA,IACJ,SAAS,KAAK;AACV,WAAK,IAAI,MAAM,yCAAyC,KAAK,WAAW,QAAQ,GAAG;AACnF;AAAA,IACJ;AAEA,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,MAAM,cAA6B;AAC/B,UAAM,SAAQ,oBAAI,KAAK,GAAE,QAAQ;AACjC,QAAI;AACA,YAAM,KAAK,gBAAgB;AAAA,IAC/B,SAAS,GAAG;AAER,UAAI,CAAC,UAAAA,QAAG,WAAW,KAAK,WAAW,eAAe,GAAG;AACjD,kBAAAA,QAAG,WAAW,KAAK,WAAW,eAAe;AAAA,MACjD;AACA,WAAK,IAAI,KAAK,+CAA+C,CAAC;AAAA,IAClE,UAAE;AACE,YAAM,OAAM,oBAAI,KAAK,GAAE,QAAQ,IAAI;AACnC,YAAM,gBAAgB,KAAK,OAAO,gBAAgB,MAAO;AACzD,WAAK,IAAI,MAAM,gBAAgB,aAAa,OAAO;AACnD,gBAAM,oBAAM,aAAa;AAEzB,WAAK,YAAY;AAAA,IACrB;AAAA,EACJ;AAAA,EAEA,MAAM,kBAAiC;AAnF3C;AAoFQ,SAAK,IAAI,MAAM,eAAe;AAE9B,UAAM,MAAM,IAAI,oBAAS;AAAA,MACrB,UAAU,KAAK,OAAO;AAAA,MACtB,UAAU,KAAK,OAAO;AAAA,MACtB,SAAS,KAAK,OAAO;AAAA,MACrB,KAAK,KAAK;AAAA,IACd,CAAC;AAED,UAAM,cAAgD,IAAI;AAAA,MACtD,KAAK,WAAW;AAAA,MAChB,KAAK;AAAA,IACT;AAEA,QAAI,YAAY,MAAM,YAAY,SAAS;AAC3C,QAAI,aAAa,QAAQ,CAAC,KAAK,aAAa,SAAS,GAAG;AACpD,YAAM,gBAAgB,MAAM,IAAI,MAAM;AACtC,mBAAY,mBAAc,SAAd,YAAsB;AAClC,UAAI,WAAW;AACX,cAAM,YAAY,MAAM,SAAS;AAAA,MACrC,OAAO;AACH,aAAK,IAAI,MAAM,qBAAqB,cAAc,GAAG,KAAK,cAAc,IAAI,GAAG;AAAA,MACnF;AAAA,IACJ,OAAO;AACH,WAAK,IAAI,MAAM,wBAAwB;AAAA,IAC3C;AAEA,QAAI,WAAW;AACX,YAAM,cAAc,IAAI,UAAU,SAAS;AAC3C,YAAM,eAAe,MAAM,YAAY,aAAa;AAEpD,WAAK,IAAI,MAAM,wBAAwB,KAAK,UAAU,aAAa,KAAK,SAAS,CAAC;AAElF,UAAI;AACJ,UAAI,aAAa,KAAK,UAAU,WAAW,GAAG;AAE1C,iBAAS,MAAM,YAAY,YAAY,GAAG,KAAK;AAAA,MACnD,OAAO;AACH,gBAAQ,aAAa,KAAK;AAAA,MAC9B;AAEA,iBAAW,QAAQ,OAAO;AACtB,cAAM,WAAW,MAAM,YAAY,SAAS,KAAK,OAAO;AAExD,cAAM,UAAU,KAAK,UAAU,SAAS,IAAI;AAC5C,cAAM,YAAY,KAAK,MAAM,OAAO;AAEpC,aAAK,qBAAqB,KAAK,SAAS,UAAU,UAAU,WAAW,QAAQ;AAE/E,eAAO,QAAQ,SAAS,EAAE,QAAQ,CAAC,YAAY;AAC3C,gBAAM,CAAC,IAAI,KAAK,IAAI;AAEpB,gBAAM,OAAO,KAAK,SAAS,KAAK;AAEhC,gBAAM,MAAM,KAAK,UAAU,MAAM;AAEjC,cAAI,SAAS,UAAU;AACnB,iBAAK,SAAS,KAAK,KAAK;AAAA,UAC5B,WAAW,SAAS,SAAS;AACzB,kBAAM,QAAQ,KAAK,MAAM,KAAK,UAAU,KAAK,CAAC;AAC9C,gBAAI,IAAI;AACR,kBAAM,QAAQ,CAAC,MAAW,SAAc;AACpC,kBAAI,KAAK,SAAS,MAAM,IAAI,CAAC,MAAM,UAAU;AACzC,qBAAK,SAAS,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC;AAAA,cAC5C,WAAW,KAAK,SAAS,MAAM,IAAI,CAAC,MAAM,UAAU;AAChD,qBAAK,SAAS,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC;AAAA,cAC5C;AACA;AAAA,YACJ,CAAC;AAAA,UACL,OAAO;AACH,iBAAK,SAAS,KAAK,KAAK;AAAA,UAC5B;AAAA,QACJ,CAAC;AAAA,MAGL;AACA,WAAK,IAAI,MAAM,YAAY;AAAA,IAC/B,OAAO;AACH,WAAK,IAAI,MAAM,eAAe;AAAA,IAClC;AAAA,EACJ;AAAA,EAEA,SAAS,KAAmG;AACxG,QAAI,QAAQ,MAAM;AACd,aAAO;AAAA,IACX;AACA,QAAI,QAAQ,QAAW;AACnB,aAAO;AAAA,IACX;AACA,QAAI,MAAM,QAAQ,GAAG,GAAG;AACpB,aAAO;AAAA,IACX;AACA,QAAI,OAAO,QAAQ,UAAU;AACzB,aAAO;AAAA,IACX;AACA,QAAI,OAAO,QAAQ,WAAW;AAC1B,aAAO;AAAA,IACX;AACA,QAAI,OAAO,QAAQ,UAAU;AACzB,aAAO;AAAA,IACX;AACA,QAAI,OAAO,QAAQ,OAAO,QAAQ,UAAU;AACxC,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,QAAQ,KAAa,OAAkB;AACnC,UAAM,QAAQ,KAAK,MAAM,KAAK,UAAU,KAAK,CAAC;AAC9C,UAAM,QAAQ,OAAO,MAAW,SAAc;AAC1C,YAAM,OAAO,KAAK,SAAS,MAAM,IAAI,CAAC;AAEtC,UAAI,SAAS,UAAU;AACnB,aAAK,SAAS,KAAK,MAAM,IAAI,CAAC;AAAA,MAClC,WAAW,SAAS,UAAU;AAC1B,aAAK,SAAS,KAAK,MAAM,IAAI,CAAC;AAAA,MAClC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,SAAS,KAAa,OAAkB;AA3M5C;AA4MQ,UAAM,QAAO,SAAI,MAAM,GAAG,EAAE,IAAI,MAAnB,mBAAsB,WAAW,KAAK;AACnD,SAAK,qBAAqB,KAAK,MAAM,QAAQ;AAC7C,WAAO,QAAQ,KAAK,EAAE,QAAQ,CAAC,eAAe;AAC1C,YAAM,CAAC,QAAQ,QAAQ,IAAI;AAC3B,YAAM,OAAO,KAAK,SAAS,QAAQ;AACnC,UAAI,SAAS,SAAS;AAClB,aAAK,QAAQ,MAAM,MAAM,QAAQ,QAAQ;AAAA,MAC7C,OAAO;AACH,aAAK,SAAS,MAAM,MAAM,QAAQ,QAAQ;AAAA,MAC9C;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,SAAS,KAAa,OAA2B;AAzN3D;AA0NQ,QAAI,WAAgC;AACpC,QAAI,WAAmB;AACvB,UAAM,UAAU,KAAK,SAAS,KAAK;AAEnC,QAAI,YAAY,WAAW;AACvB,iBAAW;AAAA,IACf;AACA,QAAI,YAAY,UAAU;AACtB,iBAAW;AAAA,IACf;AACA,QAAI,IAAI,SAAS,MAAM,GAAG;AACtB,iBAAW;AACX,iBAAW;AACX,UAAI,YAAY,UAAU;AACtB,gBAAQ,IAAI,KAAK,QAAQ,GAAI,EAAE,YAAY;AAAA,MAC/C;AAAA,IACJ;AACA,QAAI,IAAI,SAAS,MAAM,GAAG;AACtB,cAAQ,OAAO;AAAA,QACX,KAAK;AACD,qBAAW;AACX;AAAA,QACJ,KAAK;AACD,qBAAW;AACX;AAAA,QACJ;AACI;AAAA,MACR;AAAA,IACJ;AACA,QAAI,WAAW;AACf,QAAI,IAAI,SAAS,QAAQ,KAAK,CAAC,IAAI,SAAS,SAAS,GAAG;AACpD,iBAAW;AAAA,IACf;AAEA,UAAM,QAAO,SAAI,MAAM,GAAG,EAAE,IAAI,MAAnB,mBAAsB,WAAW,KAAK;AAEnD,UAAM,KAAK,oBAAoB,KAAK,MAAM,UAAU,UAAU,OAAO,QAAQ;AAC7E,SAAK,SAAS,KAAK,EAAE,KAAK,OAAO,KAAK,KAAK,CAAC;AAAA,EAChD;AAAA,EAEA,MAAM,qBACF,MACA,OAA2B,SAC3B,MACa;AACb,UAAM,MAAM,MAAM,KAAK,eAAe,IAAI;AAC1C,QAAI,OAAO,MAAM;AACb,WAAK,IAAI,MAAM,OAAO,yBAAyB;AAC/C,YAAM,SAAkC;AAAA,QACpC;AAAA,QACA,QAAQ,EAAE,KAAW;AAAA,QACrB,QAAQ,CAAC;AAAA,MACb;AACA,YAAM,KAAK,eAAe,MAAM,MAAM;AAAA,IAC1C,OAAO;AACH,WAAK,IAAI,MAAM,OAAO,8BAA8B;AACpD,UAAI,UAAmB;AACvB,UAAI,IAAI,OAAO,QAAQ,MAAM;AACzB,YAAI,OAAO,OAAO;AAClB,kBAAU;AAAA,MACd;AACA,UAAI,IAAI,OAAO,QAAQ,MAAM;AACzB,YAAI,OAAO,OAAO;AAClB,kBAAU;AAAA,MACd;AACA,UAAI,SAAS;AACT,aAAK,IAAI,MAAM,OAAO,sBAAsB;AAC5C,cAAM,KAAK,eAAe,MAAM,GAAG;AAAA,MACvC;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,oBACF,MACA,OAA2B,SAC3B,MACA,MACA,UACA,OAA2B,QAC3B,MAA0B,QAC1B,MAA0B,QAC1B,OAA2B,QACd;AACb,UAAM,MAAM,MAAM,KAAK,eAAe,IAAI;AAC1C,QAAI,OAAO,MAAM;AACb,WAAK,IAAI,MAAM,OAAO,yBAAyB;AAC/C,YAAM,SAAkC;AAAA,QACpC,MAAM;AAAA,QACN,QAAQ;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,UACA,MAAM;AAAA,UACN,OAAO;AAAA,UACP;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAAA,QACA,QAAQ,CAAC;AAAA,MACb;AACA,YAAM,KAAK,eAAe,MAAM,MAAM;AAAA,IAC1C,OAAO;AACH,WAAK,IAAI,MAAM,OAAO,8BAA8B;AACpD,UAAI,UAAmB;AACvB,UAAI,IAAI,UAAU,MAAM;AACpB,YAAI,SAAS;AAAA,UACT;AAAA,UACA,MAAM;AAAA,UACN;AAAA,UACA,MAAM;AAAA,UACN,OAAO;AAAA,UACP;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AACA,kBAAU;AAAA,MACd,OAAO;AACH,YAAI,IAAI,OAAO,QAAQ,MAAM;AACzB,cAAI,OAAO,OAAO;AAClB,oBAAU;AAAA,QACd;AACA,YAAI,IAAI,OAAO,QAAQ,MAAM;AACzB,cAAI,OAAO,OAAO;AAClB,oBAAU;AAAA,QACd;AACA,YAAI,IAAI,OAAO,QAAQ,MAAM;AACzB,cAAI,OAAO,OAAO;AAClB,oBAAU;AAAA,QACd;AACA,YAAI,IAAI,OAAO,QAAQ,MAAM;AACzB,cAAI,OAAO,OAAO;AAClB,oBAAU;AAAA,QACd;AACA,YAAI,IAAI,OAAO,SAAS,UAAU;AAC9B,cAAI,OAAO,QAAQ;AACnB,oBAAU;AAAA,QACd;AACA,YAAI,IAAI,OAAO,QAAQ,MAAM;AACzB,cAAI,OAAO,OAAO;AAClB,oBAAU;AAAA,QACd;AACA,YAAI,IAAI,OAAO,OAAO,KAAK;AACvB,cAAI,OAAO,MAAM;AACjB,oBAAU;AAAA,QACd;AACA,YAAI,IAAI,OAAO,OAAO,KAAK;AACvB,cAAI,OAAO,MAAM;AACjB,oBAAU;AAAA,QACd;AACA,YAAI,IAAI,OAAO,QAAQ,MAAM;AACzB,cAAI,OAAO,OAAO;AAClB,oBAAU;AAAA,QACd;AACA,YAAI,SAAS;AACT,eAAK,IAAI,MAAM,OAAO,sBAAsB;AAC5C,gBAAM,KAAK,eAAe,MAAM,GAAG;AAAA,QACvC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,QAAQ,OAA8B;AAClC,WAAO,KAAK,MAAM,KAAK,UAAU,KAAK,CAAC;AAAA,EAC3C;AAAA,EAEA,aAAa,WAAgC,MAAY,oBAAI,KAAK,GAAY;AAC1E,WAAO,IAAI,KAAK,UAAU,mBAAmB,GAAI,EAAE,QAAQ,IAAI,IAAI,QAAQ;AAAA,EAC/E;AAAA;AAAA;AAAA;AAAA,EAKQ,SAAS,UAA4B;AACzC,QAAI;AAOA,eAAS;AAAA,IACb,SAAS,GAAG;AACR,WAAK,IAAI,MAAM,eAAe,CAAC;AAC/B,eAAS;AAAA,IACb;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,EAAE,aAAa,MAAM,GAAG,WAAW,MAAM,GAAG,GAAG;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,EAAE,UAAU;AAAA,IACvC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,YAAY,OAAO;AACpG,OAAO;AAEH,GAAC,MAAM,IAAI,YAAY,GAAG;AAC9B;",
  "names": ["fs"]
}
